import { __extends } from 'tslib';
import { LocalizeParser } from '@gilsdav/ngx-translate-router';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var LocalizeRouterHttpLoader = /** @class */ (function (_super) {
    __extends(LocalizeRouterHttpLoader, _super);
    /**
     * CTOR
     * @param translate
     * @param location
     * @param settings
     * @param http
     * @param path
     */
    function LocalizeRouterHttpLoader(translate, location, settings, http, path) {
        if (path === void 0) { path = 'assets/locales.json'; }
        var _this = _super.call(this, translate, location, settings) || this;
        _this.http = http;
        _this.path = path;
        return _this;
    }
    /**
     * Initialize or append routes
     * @param routes
     */
    /**
     * Initialize or append routes
     * @param {?} routes
     * @return {?}
     */
    LocalizeRouterHttpLoader.prototype.load = /**
     * Initialize or append routes
     * @param {?} routes
     * @return {?}
     */
    function (routes) {
        var _this = this;
        return new Promise(function (resolve) {
            _this.http.get("" + _this.path)
                .subscribe(function (data) {
                _this.locales = data.locales;
                _this.prefix = data.prefix || '';
                _this.init(routes).then(resolve);
            });
        });
    };
    return LocalizeRouterHttpLoader;
}(LocalizeParser));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

export { LocalizeRouterHttpLoader };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2lsc2Rhdi1uZ3gtdHJhbnNsYXRlLXJvdXRlci1odHRwLWxvYWRlci5qcy5tYXAiLCJzb3VyY2VzIjpbIm5nOi8vQGdpbHNkYXYvbmd4LXRyYW5zbGF0ZS1yb3V0ZXItaHR0cC1sb2FkZXIvbGliL2h0dHAtbG9hZGVyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IExvY2FsaXplUGFyc2VyLCBMb2NhbGl6ZVJvdXRlclNldHRpbmdzIH0gZnJvbSAnQGdpbHNkYXYvbmd4LXRyYW5zbGF0ZS1yb3V0ZXInO1xuaW1wb3J0IHsgVHJhbnNsYXRlU2VydmljZSB9IGZyb20gJ0BuZ3gtdHJhbnNsYXRlL2NvcmUnO1xuaW1wb3J0IHsgSHR0cENsaWVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IFJvdXRlcyB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBMb2NhdGlvbiB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5cbi8qKlxuICogQ29uZmlnIGludGVyZmFjZVxuICovXG5leHBvcnQgaW50ZXJmYWNlIElMb2NhbGl6ZVJvdXRlclBhcnNlckNvbmZpZyB7XG4gIGxvY2FsZXM6IEFycmF5PHN0cmluZz47XG4gIHByZWZpeD86IHN0cmluZztcbn1cblxuZXhwb3J0IGNsYXNzIExvY2FsaXplUm91dGVySHR0cExvYWRlciBleHRlbmRzIExvY2FsaXplUGFyc2VyIHtcbiAgLyoqXG4gICAqIENUT1JcbiAgICogQHBhcmFtIHRyYW5zbGF0ZVxuICAgKiBAcGFyYW0gbG9jYXRpb25cbiAgICogQHBhcmFtIHNldHRpbmdzXG4gICAqIEBwYXJhbSBodHRwXG4gICAqIEBwYXJhbSBwYXRoXG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICB0cmFuc2xhdGU6IFRyYW5zbGF0ZVNlcnZpY2UsXG4gICAgbG9jYXRpb246IExvY2F0aW9uLFxuICAgIHNldHRpbmdzOiBMb2NhbGl6ZVJvdXRlclNldHRpbmdzLFxuICAgIHByaXZhdGUgaHR0cDogSHR0cENsaWVudCxcbiAgICBwcml2YXRlIHBhdGg6IHN0cmluZyA9ICdhc3NldHMvbG9jYWxlcy5qc29uJ1xuICAgICkge1xuICAgIHN1cGVyKHRyYW5zbGF0ZSwgbG9jYXRpb24sIHNldHRpbmdzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplIG9yIGFwcGVuZCByb3V0ZXNcbiAgICogQHBhcmFtIHJvdXRlc1xuICAgKi9cbiAgbG9hZChyb3V0ZXM6IFJvdXRlcyk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlOiBhbnkpID0+IHtcbiAgICAgIHRoaXMuaHR0cC5nZXQoYCR7dGhpcy5wYXRofWApXG4gICAgICAgIC5zdWJzY3JpYmUoKGRhdGE6IElMb2NhbGl6ZVJvdXRlclBhcnNlckNvbmZpZykgPT4ge1xuICAgICAgICAgIHRoaXMubG9jYWxlcyA9IGRhdGEubG9jYWxlcztcbiAgICAgICAgICB0aGlzLnByZWZpeCA9IGRhdGEucHJlZml4IHx8ICcnO1xuICAgICAgICAgIHRoaXMuaW5pdChyb3V0ZXMpLnRoZW4ocmVzb2x2ZSk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuICB9XG59XG4iXSwibmFtZXMiOlsidHNsaWJfMS5fX2V4dGVuZHMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0lBYzhDQSw0Q0FBYzs7Ozs7Ozs7O0lBUzFELGtDQUNFLFNBQTJCLEVBQzNCLFFBQWtCLEVBQ2xCLFFBQWdDLEVBQ3hCLElBQWdCLEVBQ2hCLElBQW9DO1FBQXBDLHFCQUFBLEVBQUEsNEJBQW9DO1FBTDlDLFlBT0Usa0JBQU0sU0FBUyxFQUFFLFFBQVEsRUFBRSxRQUFRLENBQUMsU0FDckM7UUFKUyxVQUFJLEdBQUosSUFBSSxDQUFZO1FBQ2hCLFVBQUksR0FBSixJQUFJLENBQWdDOztLQUc3Qzs7Ozs7Ozs7OztJQU1ELHVDQUFJOzs7OztJQUFKLFVBQUssTUFBYztRQUFuQixpQkFTQztRQVJDLE9BQU8sSUFBSSxPQUFPLENBQUMsVUFBQyxPQUFZO1lBQzlCLEtBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUcsS0FBSSxDQUFDLElBQU0sQ0FBQztpQkFDMUIsU0FBUyxDQUFDLFVBQUMsSUFBaUM7Z0JBQzNDLEtBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQztnQkFDNUIsS0FBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxJQUFJLEVBQUUsQ0FBQztnQkFDaEMsS0FBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7YUFDakMsQ0FBQyxDQUFDO1NBQ04sQ0FBQyxDQUFDO0tBQ0o7SUFDSCwrQkFBQztDQUFBLENBakM2QyxjQUFjOzs7Ozs7Ozs7Ozs7OzsifQ==