import { LocalizeParser } from '@gilsdav/ngx-translate-router';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class LocalizeRouterHttpLoader extends LocalizeParser {
    /**
     * CTOR
     * @param {?} translate
     * @param {?} location
     * @param {?} settings
     * @param {?} http
     * @param {?=} path
     */
    constructor(translate, location, settings, http, path = 'assets/locales.json') {
        super(translate, location, settings);
        this.http = http;
        this.path = path;
    }
    /**
     * Initialize or append routes
     * @param {?} routes
     * @return {?}
     */
    load(routes) {
        return new Promise((resolve) => {
            this.http.get(`${this.path}`)
                .subscribe((data) => {
                this.locales = data.locales;
                this.prefix = data.prefix || '';
                this.init(routes).then(resolve);
            });
        });
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

export { LocalizeRouterHttpLoader };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2lsc2Rhdi1uZ3gtdHJhbnNsYXRlLXJvdXRlci1odHRwLWxvYWRlci5qcy5tYXAiLCJzb3VyY2VzIjpbIm5nOi8vQGdpbHNkYXYvbmd4LXRyYW5zbGF0ZS1yb3V0ZXItaHR0cC1sb2FkZXIvbGliL2h0dHAtbG9hZGVyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IExvY2FsaXplUGFyc2VyLCBMb2NhbGl6ZVJvdXRlclNldHRpbmdzIH0gZnJvbSAnQGdpbHNkYXYvbmd4LXRyYW5zbGF0ZS1yb3V0ZXInO1xuaW1wb3J0IHsgVHJhbnNsYXRlU2VydmljZSB9IGZyb20gJ0BuZ3gtdHJhbnNsYXRlL2NvcmUnO1xuaW1wb3J0IHsgSHR0cENsaWVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IFJvdXRlcyB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBMb2NhdGlvbiB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5cbi8qKlxuICogQ29uZmlnIGludGVyZmFjZVxuICovXG5leHBvcnQgaW50ZXJmYWNlIElMb2NhbGl6ZVJvdXRlclBhcnNlckNvbmZpZyB7XG4gIGxvY2FsZXM6IEFycmF5PHN0cmluZz47XG4gIHByZWZpeD86IHN0cmluZztcbn1cblxuZXhwb3J0IGNsYXNzIExvY2FsaXplUm91dGVySHR0cExvYWRlciBleHRlbmRzIExvY2FsaXplUGFyc2VyIHtcbiAgLyoqXG4gICAqIENUT1JcbiAgICogQHBhcmFtIHRyYW5zbGF0ZVxuICAgKiBAcGFyYW0gbG9jYXRpb25cbiAgICogQHBhcmFtIHNldHRpbmdzXG4gICAqIEBwYXJhbSBodHRwXG4gICAqIEBwYXJhbSBwYXRoXG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICB0cmFuc2xhdGU6IFRyYW5zbGF0ZVNlcnZpY2UsXG4gICAgbG9jYXRpb246IExvY2F0aW9uLFxuICAgIHNldHRpbmdzOiBMb2NhbGl6ZVJvdXRlclNldHRpbmdzLFxuICAgIHByaXZhdGUgaHR0cDogSHR0cENsaWVudCxcbiAgICBwcml2YXRlIHBhdGg6IHN0cmluZyA9ICdhc3NldHMvbG9jYWxlcy5qc29uJ1xuICAgICkge1xuICAgIHN1cGVyKHRyYW5zbGF0ZSwgbG9jYXRpb24sIHNldHRpbmdzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplIG9yIGFwcGVuZCByb3V0ZXNcbiAgICogQHBhcmFtIHJvdXRlc1xuICAgKi9cbiAgbG9hZChyb3V0ZXM6IFJvdXRlcyk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlOiBhbnkpID0+IHtcbiAgICAgIHRoaXMuaHR0cC5nZXQoYCR7dGhpcy5wYXRofWApXG4gICAgICAgIC5zdWJzY3JpYmUoKGRhdGE6IElMb2NhbGl6ZVJvdXRlclBhcnNlckNvbmZpZykgPT4ge1xuICAgICAgICAgIHRoaXMubG9jYWxlcyA9IGRhdGEubG9jYWxlcztcbiAgICAgICAgICB0aGlzLnByZWZpeCA9IGRhdGEucHJlZml4IHx8ICcnO1xuICAgICAgICAgIHRoaXMuaW5pdChyb3V0ZXMpLnRoZW4ocmVzb2x2ZSk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuICB9XG59XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsOEJBY3NDLFNBQVEsY0FBYzs7Ozs7Ozs7O0lBUzFELFlBQ0UsU0FBMkIsRUFDM0IsUUFBa0IsRUFDbEIsUUFBZ0MsRUFDeEIsSUFBZ0IsRUFDaEIsT0FBZSxxQkFBcUI7UUFFNUMsS0FBSyxDQUFDLFNBQVMsRUFBRSxRQUFRLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFIN0IsU0FBSSxHQUFKLElBQUksQ0FBWTtRQUNoQixTQUFJLEdBQUosSUFBSSxDQUFnQztLQUc3Qzs7Ozs7O0lBTUQsSUFBSSxDQUFDLE1BQWM7UUFDakIsT0FBTyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQVk7WUFDOUIsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7aUJBQzFCLFNBQVMsQ0FBQyxDQUFDLElBQWlDO2dCQUMzQyxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUM7Z0JBQzVCLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sSUFBSSxFQUFFLENBQUM7Z0JBQ2hDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO2FBQ2pDLENBQUMsQ0FBQztTQUNOLENBQUMsQ0FBQztLQUNKO0NBQ0Y7Ozs7Ozs7Ozs7Ozs7OyJ9