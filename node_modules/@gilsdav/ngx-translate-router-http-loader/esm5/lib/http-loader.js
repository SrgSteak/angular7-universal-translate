/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { LocalizeParser } from '@gilsdav/ngx-translate-router';
/**
 * Config interface
 * @record
 */
export function ILocalizeRouterParserConfig() { }
if (false) {
    /** @type {?} */
    ILocalizeRouterParserConfig.prototype.locales;
    /** @type {?|undefined} */
    ILocalizeRouterParserConfig.prototype.prefix;
}
var LocalizeRouterHttpLoader = /** @class */ (function (_super) {
    tslib_1.__extends(LocalizeRouterHttpLoader, _super);
    /**
     * CTOR
     * @param translate
     * @param location
     * @param settings
     * @param http
     * @param path
     */
    function LocalizeRouterHttpLoader(translate, location, settings, http, path) {
        if (path === void 0) { path = 'assets/locales.json'; }
        var _this = _super.call(this, translate, location, settings) || this;
        _this.http = http;
        _this.path = path;
        return _this;
    }
    /**
     * Initialize or append routes
     * @param routes
     */
    /**
     * Initialize or append routes
     * @param {?} routes
     * @return {?}
     */
    LocalizeRouterHttpLoader.prototype.load = /**
     * Initialize or append routes
     * @param {?} routes
     * @return {?}
     */
    function (routes) {
        var _this = this;
        return new Promise(function (resolve) {
            _this.http.get("" + _this.path)
                .subscribe(function (data) {
                _this.locales = data.locales;
                _this.prefix = data.prefix || '';
                _this.init(routes).then(resolve);
            });
        });
    };
    return LocalizeRouterHttpLoader;
}(LocalizeParser));
export { LocalizeRouterHttpLoader };
if (false) {
    /** @type {?} */
    LocalizeRouterHttpLoader.prototype.http;
    /** @type {?} */
    LocalizeRouterHttpLoader.prototype.path;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHR0cC1sb2FkZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZ2lsc2Rhdi9uZ3gtdHJhbnNsYXRlLXJvdXRlci1odHRwLWxvYWRlci8iLCJzb3VyY2VzIjpbImxpYi9odHRwLWxvYWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxjQUFjLEVBQTBCLE1BQU0sK0JBQStCLENBQUM7Ozs7O0FBU3ZGLGlEQUdDOzs7SUFGQyw4Q0FBdUI7O0lBQ3ZCLDZDQUFnQjs7QUFHbEI7SUFBOEMsb0RBQWM7SUFDMUQ7Ozs7Ozs7T0FPRztJQUNILGtDQUNFLFNBQTJCLEVBQzNCLFFBQWtCLEVBQ2xCLFFBQWdDLEVBQ3hCLElBQWdCLEVBQ2hCLElBQW9DO1FBQXBDLHFCQUFBLEVBQUEsNEJBQW9DO1FBTDlDLFlBT0Usa0JBQU0sU0FBUyxFQUFFLFFBQVEsRUFBRSxRQUFRLENBQUMsU0FDckM7UUFKUyxVQUFJLEdBQUosSUFBSSxDQUFZO1FBQ2hCLFVBQUksR0FBSixJQUFJLENBQWdDOztJQUc5QyxDQUFDO0lBRUQ7OztPQUdHOzs7Ozs7SUFDSCx1Q0FBSTs7Ozs7SUFBSixVQUFLLE1BQWM7UUFBbkIsaUJBU0M7UUFSQyxNQUFNLENBQUMsSUFBSSxPQUFPLENBQUMsVUFBQyxPQUFZO1lBQzlCLEtBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUcsS0FBSSxDQUFDLElBQU0sQ0FBQztpQkFDMUIsU0FBUyxDQUFDLFVBQUMsSUFBaUM7Z0JBQzNDLEtBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQztnQkFDNUIsS0FBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxJQUFJLEVBQUUsQ0FBQztnQkFDaEMsS0FBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDbEMsQ0FBQyxDQUFDLENBQUM7UUFDUCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFDSCwrQkFBQztBQUFELENBQUMsQUFqQ0QsQ0FBOEMsY0FBYyxHQWlDM0Q7Ozs7SUFwQkcsd0NBQXdCOztJQUN4Qix3Q0FBNEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBMb2NhbGl6ZVBhcnNlciwgTG9jYWxpemVSb3V0ZXJTZXR0aW5ncyB9IGZyb20gJ0BnaWxzZGF2L25neC10cmFuc2xhdGUtcm91dGVyJztcbmltcG9ydCB7IFRyYW5zbGF0ZVNlcnZpY2UgfSBmcm9tICdAbmd4LXRyYW5zbGF0ZS9jb3JlJztcbmltcG9ydCB7IEh0dHBDbGllbnQgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBSb3V0ZXMgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgTG9jYXRpb24gfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuXG4vKipcbiAqIENvbmZpZyBpbnRlcmZhY2VcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJTG9jYWxpemVSb3V0ZXJQYXJzZXJDb25maWcge1xuICBsb2NhbGVzOiBBcnJheTxzdHJpbmc+O1xuICBwcmVmaXg/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBjbGFzcyBMb2NhbGl6ZVJvdXRlckh0dHBMb2FkZXIgZXh0ZW5kcyBMb2NhbGl6ZVBhcnNlciB7XG4gIC8qKlxuICAgKiBDVE9SXG4gICAqIEBwYXJhbSB0cmFuc2xhdGVcbiAgICogQHBhcmFtIGxvY2F0aW9uXG4gICAqIEBwYXJhbSBzZXR0aW5nc1xuICAgKiBAcGFyYW0gaHR0cFxuICAgKiBAcGFyYW0gcGF0aFxuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgdHJhbnNsYXRlOiBUcmFuc2xhdGVTZXJ2aWNlLFxuICAgIGxvY2F0aW9uOiBMb2NhdGlvbixcbiAgICBzZXR0aW5nczogTG9jYWxpemVSb3V0ZXJTZXR0aW5ncyxcbiAgICBwcml2YXRlIGh0dHA6IEh0dHBDbGllbnQsXG4gICAgcHJpdmF0ZSBwYXRoOiBzdHJpbmcgPSAnYXNzZXRzL2xvY2FsZXMuanNvbidcbiAgICApIHtcbiAgICBzdXBlcih0cmFuc2xhdGUsIGxvY2F0aW9uLCBzZXR0aW5ncyk7XG4gIH1cblxuICAvKipcbiAgICogSW5pdGlhbGl6ZSBvciBhcHBlbmQgcm91dGVzXG4gICAqIEBwYXJhbSByb3V0ZXNcbiAgICovXG4gIGxvYWQocm91dGVzOiBSb3V0ZXMpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZTogYW55KSA9PiB7XG4gICAgICB0aGlzLmh0dHAuZ2V0KGAke3RoaXMucGF0aH1gKVxuICAgICAgICAuc3Vic2NyaWJlKChkYXRhOiBJTG9jYWxpemVSb3V0ZXJQYXJzZXJDb25maWcpID0+IHtcbiAgICAgICAgICB0aGlzLmxvY2FsZXMgPSBkYXRhLmxvY2FsZXM7XG4gICAgICAgICAgdGhpcy5wcmVmaXggPSBkYXRhLnByZWZpeCB8fCAnJztcbiAgICAgICAgICB0aGlzLmluaXQocm91dGVzKS50aGVuKHJlc29sdmUpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbiAgfVxufVxuIl19