(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@ngx-translate/core'), require('rxjs'), require('@angular/common'), require('@angular/router'), require('rxjs/operators')) :
    typeof define === 'function' && define.amd ? define('@gilsdav/ngx-translate-router', ['exports', '@angular/core', '@ngx-translate/core', 'rxjs', '@angular/common', '@angular/router', 'rxjs/operators'], factory) :
    (factory((global.gilsdav = global.gilsdav || {}, global.gilsdav['ngx-translate-router'] = {}),global.ng.core,null,global.rxjs,global.ng.common,global.ng.router,global.rxjs.operators));
}(this, (function (exports,core,core$1,rxjs,common,router,operators) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (b.hasOwnProperty(p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /**
     * Guard to make sure we have single initialization of forRoot
     * @type {?}
     */
    var LOCALIZE_ROUTER_FORROOT_GUARD = new core.InjectionToken('LOCALIZE_ROUTER_FORROOT_GUARD');
    /**
     * Static provider for keeping track of routes
     * @type {?}
     */
    var RAW_ROUTES = new core.InjectionToken('RAW_ROUTES');
    /**
     * Namespace for fail proof access of CacheMechanism
     */
    (function (CacheMechanism) {
        CacheMechanism.LocalStorage = 'LocalStorage';
        CacheMechanism.Cookie = 'Cookie';
    })(exports.CacheMechanism || (exports.CacheMechanism = {}));
    /**
     * Boolean to indicate whether to use cached language value
     * @type {?}
     */
    var USE_CACHED_LANG = new core.InjectionToken('USE_CACHED_LANG');
    /**
     * Cache mechanism type
     * @type {?}
     */
    var CACHE_MECHANISM = new core.InjectionToken('CACHE_MECHANISM');
    /**
     * Cache name
     * @type {?}
     */
    var CACHE_NAME = new core.InjectionToken('CACHE_NAME');
    /**
     * Function for calculating default language
     * @type {?}
     */
    var DEFAULT_LANG_FUNCTION = new core.InjectionToken('DEFAULT_LANG_FUNCTION');
    /**
     * Boolean to indicate whether prefix should be set for single language scenarios
     * @type {?}
     */
    var ALWAYS_SET_PREFIX = new core.InjectionToken('ALWAYS_SET_PREFIX');
    /** @type {?} */
    var LOCALIZE_CACHE_NAME = 'LOCALIZE_DEFAULT_LANGUAGE';
    var LocalizeRouterSettings = (function () {
        /**
         * Settings for localize router
         */
        function LocalizeRouterSettings(useCachedLang, alwaysSetPrefix, cacheMechanism, cacheName, defaultLangFunction) {
            if (useCachedLang === void 0) {
                useCachedLang = true;
            }
            if (alwaysSetPrefix === void 0) {
                alwaysSetPrefix = true;
            }
            if (cacheMechanism === void 0) {
                cacheMechanism = exports.CacheMechanism.LocalStorage;
            }
            if (cacheName === void 0) {
                cacheName = LOCALIZE_CACHE_NAME;
            }
            if (defaultLangFunction === void 0) {
                defaultLangFunction = void 0;
            }
            this.useCachedLang = useCachedLang;
            this.alwaysSetPrefix = alwaysSetPrefix;
            this.cacheMechanism = cacheMechanism;
            this.cacheName = cacheName;
            this.defaultLangFunction = defaultLangFunction;
        }
        LocalizeRouterSettings.ctorParameters = function () {
            return [
                { type: Boolean, decorators: [{ type: core.Inject, args: [USE_CACHED_LANG,] }] },
                { type: Boolean, decorators: [{ type: core.Inject, args: [ALWAYS_SET_PREFIX,] }] },
                { type: exports.CacheMechanism, decorators: [{ type: core.Inject, args: [CACHE_MECHANISM,] }] },
                { type: String, decorators: [{ type: core.Inject, args: [CACHE_NAME,] }] },
                { type: undefined, decorators: [{ type: core.Inject, args: [DEFAULT_LANG_FUNCTION,] }] }
            ];
        };
        return LocalizeRouterSettings;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var COOKIE_EXPIRY = 30;
    // 1 month
    /**
     * Abstract class for parsing localization
     * @abstract
     */
    var LocalizeParser = (function () {
        /**
         * Loader constructor
         */
        function LocalizeParser(translate, location, settings) {
            this.translate = translate;
            this.location = location;
            this.settings = settings;
        }
        /**
       * Prepare routes to be fully usable by ngx-translate-router
       * @param routes
       */
        /* private initRoutes(routes: Routes, prefix = '') {
          routes.forEach(route => {
            if (route.path !== '**') {
              const routeData: any = route.data = route.data || {};
              routeData.localizeRouter = {};
              routeData.localizeRouter.fullPath = `${prefix}/${route.path}`;
              if (route.children && route.children.length > 0) {
                this.initRoutes(route.children, routeData.localizeRouter.fullPath);
              }
            }
          });
        } */
        /**
         * Initialize language and routes
         */
        /**
         * Prepare routes to be fully usable by ngx-translate-router
         * @param routes
         */
        /* private initRoutes(routes: Routes, prefix = '') {
            routes.forEach(route => {
              if (route.path !== '**') {
                const routeData: any = route.data = route.data || {};
                routeData.localizeRouter = {};
                routeData.localizeRouter.fullPath = `${prefix}/${route.path}`;
                if (route.children && route.children.length > 0) {
                  this.initRoutes(route.children, routeData.localizeRouter.fullPath);
                }
              }
            });
          } */
        /**
         * Initialize language and routes
         * @param {?} routes
         * @return {?}
         */
        LocalizeParser.prototype.init = /**
         * Prepare routes to be fully usable by ngx-translate-router
         * @param routes
         */
            /* private initRoutes(routes: Routes, prefix = '') {
                routes.forEach(route => {
                  if (route.path !== '**') {
                    const routeData: any = route.data = route.data || {};
                    routeData.localizeRouter = {};
                    routeData.localizeRouter.fullPath = `${prefix}/${route.path}`;
                    if (route.children && route.children.length > 0) {
                      this.initRoutes(route.children, routeData.localizeRouter.fullPath);
                    }
                  }
                });
              } */
            /**
             * Initialize language and routes
             * @param {?} routes
             * @return {?}
             */
            function (routes) {
                /** @type {?} */
                var selectedLanguage;
                // this.initRoutes(routes);
                this.routes = routes;
                if (!this.locales || !this.locales.length) {
                    return Promise.resolve();
                }
                /**
                 * detect current language
                 * @type {?}
                 */
                var locationLang = this.getLocationLang();
                /** @type {?} */
                var browserLang = this._getBrowserLang();
                if (this.settings.defaultLangFunction) {
                    this.defaultLang = this.settings.defaultLangFunction(this.locales, this._cachedLang, browserLang);
                }
                else {
                    this.defaultLang = this._cachedLang || browserLang || this.locales[0];
                }
                selectedLanguage = locationLang || this.defaultLang;
                this.translate.setDefaultLang(this.defaultLang);
                /** @type {?} */
                var children = [];
                /** if set prefix is enforced */
                if (this.settings.alwaysSetPrefix) {
                    /** @type {?} */
                    var baseRoute = { path: '', redirectTo: this.defaultLang, pathMatch: 'full' };
                    /**
                     * extract potential wildcard route
                     * @type {?}
                     */
                    var wildcardIndex = routes.findIndex(function (route) { return route.path === '**'; });
                    if (wildcardIndex !== -1) {
                        this._wildcardRoute = routes.splice(wildcardIndex, 1)[0];
                    }
                    children = this.routes.splice(0, this.routes.length, baseRoute);
                }
                else {
                    children = __spread(this.routes); // shallow copy of routes
                }
                /** exclude certain routes */
                for (var i = children.length - 1; i >= 0; i--) {
                    if (children[i].data && children[i].data['skipRouteLocalization']) {
                        if (this.settings.alwaysSetPrefix) {
                            // add directly to routes
                            this.routes.push(children[i]);
                        }
                        children.splice(i, 1);
                    }
                }
                /** append children routes */
                if (children && children.length) {
                    if (this.locales.length > 1 || this.settings.alwaysSetPrefix) {
                        this._languageRoute = { children: children };
                        this.routes.unshift(this._languageRoute);
                    }
                }
                /** ...and potential wildcard route */
                if (this._wildcardRoute && this.settings.alwaysSetPrefix) {
                    this.routes.push(this._wildcardRoute);
                }
                /**
                 * translate routes
                 * @type {?}
                 */
                var res = this.translateRoutes(selectedLanguage);
                return res.toPromise();
            };
        /**
         * @param {?} routes
         * @return {?}
         */
        LocalizeParser.prototype.initChildRoutes = /**
         * @param {?} routes
         * @return {?}
         */
            function (routes) {
                this._translateRouteTree(routes);
                return routes;
            };
        /**
         * Translate routes to selected language
         */
        /**
         * Translate routes to selected language
         * @param {?} language
         * @return {?}
         */
        LocalizeParser.prototype.translateRoutes = /**
         * Translate routes to selected language
         * @param {?} language
         * @return {?}
         */
            function (language) {
                var _this = this;
                return new rxjs.Observable(function (observer) {
                    _this._cachedLang = language;
                    if (_this._languageRoute) {
                        _this._languageRoute.path = language;
                    }
                    _this.translate.use(language).subscribe(function (translations) {
                        _this._translationObject = translations;
                        _this.currentLang = language;
                        if (_this._languageRoute) {
                            if (_this._languageRoute) {
                                _this._translateRouteTree(_this._languageRoute.children);
                            }
                            // if there is wildcard route
                            if (_this._wildcardRoute && _this._wildcardRoute.redirectTo) {
                                _this._translateProperty(_this._wildcardRoute, 'redirectTo', true);
                            }
                        }
                        else {
                            _this._translateRouteTree(_this.routes);
                        }
                        observer.next(void 0);
                        observer.complete();
                    });
                });
            };
        /**
         * Translate the route node and recursively call for all it's children
         */
        /**
         * Translate the route node and recursively call for all it's children
         * @param {?} routes
         * @return {?}
         */
        LocalizeParser.prototype._translateRouteTree = /**
         * Translate the route node and recursively call for all it's children
         * @param {?} routes
         * @return {?}
         */
            function (routes) {
                var _this = this;
                routes.forEach(function (route) {
                    if (route.path !== null && route.path !== undefined /* && route.path !== '**'*/) {
                        _this._translateProperty(route, 'path');
                    }
                    if (route.redirectTo) {
                        _this._translateProperty(route, 'redirectTo', !route.redirectTo.indexOf('/'));
                    }
                    if (route.children) {
                        _this._translateRouteTree(route.children);
                    }
                    if (route.loadChildren && (((route)))._loadedConfig) {
                        _this._translateRouteTree((((route)))._loadedConfig.routes);
                    }
                });
            };
        /**
         * Translate property
         * If first time translation then add original to route data object
         */
        /**
         * Translate property
         * If first time translation then add original to route data object
         * @param {?} route
         * @param {?} property
         * @param {?=} prefixLang
         * @return {?}
         */
        LocalizeParser.prototype._translateProperty = /**
         * Translate property
         * If first time translation then add original to route data object
         * @param {?} route
         * @param {?} property
         * @param {?=} prefixLang
         * @return {?}
         */
            function (route, property, prefixLang) {
                // set property to data if not there yet
                /** @type {?} */
                var routeData = route.data = route.data || {};
                if (!routeData.localizeRouter) {
                    routeData.localizeRouter = {};
                }
                if (!routeData.localizeRouter[property]) {
                    routeData.localizeRouter[property] = (((route)))[property];
                }
                /** @type {?} */
                var result = this.translateRoute(routeData.localizeRouter[property]);
                (((route)))[property] = prefixLang ? "/" + this.urlPrefix + result : result;
            };
        Object.defineProperty(LocalizeParser.prototype, "urlPrefix", {
            get: /**
             * @return {?}
             */ function () {
                return this.settings.alwaysSetPrefix || this.currentLang !== this.defaultLang ? this.currentLang : '';
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Translate route and return observable
         */
        /**
         * Translate route and return observable
         * @param {?} path
         * @return {?}
         */
        LocalizeParser.prototype.translateRoute = /**
         * Translate route and return observable
         * @param {?} path
         * @return {?}
         */
            function (path) {
                var _this = this;
                /** @type {?} */
                var queryParts = path.split('?');
                if (queryParts.length > 2) {
                    throw Error('There should be only one query parameter block in the URL');
                }
                /** @type {?} */
                var pathSegments = queryParts[0].split('/');
                /** collect observables  */
                return pathSegments
                    .map(function (part) { return part.length ? _this.translateText(part) : part; })
                    .join('/') +
                    (queryParts.length > 1 ? "?" + queryParts[1] : '');
            };
        /**
         * Get language from url
         */
        /**
         * Get language from url
         * @param {?=} url
         * @return {?}
         */
        LocalizeParser.prototype.getLocationLang = /**
         * Get language from url
         * @param {?=} url
         * @return {?}
         */
            function (url) {
                /** @type {?} */
                var queryParamSplit = (url || this.location.path()).split('?');
                /** @type {?} */
                var pathSlices = [];
                if (queryParamSplit.length > 0) {
                    pathSlices = queryParamSplit[0].split('/');
                }
                if (pathSlices.length > 1 && this.locales.indexOf(pathSlices[1]) !== -1) {
                    return pathSlices[1];
                }
                if (pathSlices.length && this.locales.indexOf(pathSlices[0]) !== -1) {
                    return pathSlices[0];
                }
                return null;
            };
        /**
         * Get user's language set in the browser
         */
        /**
         * Get user's language set in the browser
         * @return {?}
         */
        LocalizeParser.prototype._getBrowserLang = /**
         * Get user's language set in the browser
         * @return {?}
         */
            function () {
                return this._returnIfInLocales(this.translate.getBrowserLang());
            };
        Object.defineProperty(LocalizeParser.prototype, "_cachedLang", {
            /**
             * Get language from local storage or cookie
             */
            get: /**
             * Get language from local storage or cookie
             * @return {?}
             */ function () {
                if (!this.settings.useCachedLang) {
                    return;
                }
                if (this.settings.cacheMechanism === exports.CacheMechanism.LocalStorage) {
                    return this._cacheWithLocalStorage();
                }
                if (this.settings.cacheMechanism === exports.CacheMechanism.Cookie) {
                    return this._cacheWithCookies();
                }
            },
            /**
             * Save language to local storage or cookie
             */
            set: /**
             * Save language to local storage or cookie
             * @param {?} value
             * @return {?}
             */ function (value) {
                if (!this.settings.useCachedLang) {
                    return;
                }
                if (this.settings.cacheMechanism === exports.CacheMechanism.LocalStorage) {
                    this._cacheWithLocalStorage(value);
                }
                if (this.settings.cacheMechanism === exports.CacheMechanism.Cookie) {
                    this._cacheWithCookies(value);
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Cache value to local storage
         */
        /**
         * Cache value to local storage
         * @param {?=} value
         * @return {?}
         */
        LocalizeParser.prototype._cacheWithLocalStorage = /**
         * Cache value to local storage
         * @param {?=} value
         * @return {?}
         */
            function (value) {
                if (typeof window === 'undefined' || typeof window.localStorage === 'undefined') {
                    return;
                }
                try {
                    if (value) {
                        window.localStorage.setItem(this.settings.cacheName, value);
                        return;
                    }
                    return this._returnIfInLocales(window.localStorage.getItem(this.settings.cacheName));
                }
                catch (e) {
                    // weird Safari issue in private mode, where LocalStorage is defined but throws error on access
                    return;
                }
            };
        /**
         * Cache value via cookies
         */
        /**
         * Cache value via cookies
         * @param {?=} value
         * @return {?}
         */
        LocalizeParser.prototype._cacheWithCookies = /**
         * Cache value via cookies
         * @param {?=} value
         * @return {?}
         */
            function (value) {
                if (typeof document === 'undefined' || typeof document.cookie === 'undefined') {
                    return;
                }
                try {
                    /** @type {?} */
                    var name_1 = encodeURIComponent(this.settings.cacheName);
                    if (value) {
                        /** @type {?} */
                        var d = new Date();
                        d.setTime(d.getTime() + COOKIE_EXPIRY * 86400000); // * days
                        document.cookie = name_1 + "=" + encodeURIComponent(value) + ";expires=" + d.toUTCString();
                        return;
                    }
                    /** @type {?} */
                    var regexp = new RegExp('(?:^' + name_1 + '|;\\s*' + name_1 + ')=(.*?)(?:;|$)', 'g');
                    /** @type {?} */
                    var result = regexp.exec(document.cookie);
                    return decodeURIComponent(result[1]);
                }
                catch (e) {
                    return; // should not happen but better safe than sorry
                }
            };
        /**
         * Check if value exists in locales list
         */
        /**
         * Check if value exists in locales list
         * @param {?} value
         * @return {?}
         */
        LocalizeParser.prototype._returnIfInLocales = /**
         * Check if value exists in locales list
         * @param {?} value
         * @return {?}
         */
            function (value) {
                if (value && this.locales.indexOf(value) !== -1) {
                    return value;
                }
                return null;
            };
        /**
         * Get translated value
         */
        /**
         * Get translated value
         * @param {?} key
         * @return {?}
         */
        LocalizeParser.prototype.translateText = /**
         * Get translated value
         * @param {?} key
         * @return {?}
         */
            function (key) {
                if (!this._translationObject) {
                    return key;
                }
                /** @type {?} */
                var fullKey = this.prefix + key;
                /** @type {?} */
                var res = this.translate.getParsedResult(this._translationObject, fullKey);
                return res !== fullKey ? res : key;
            };
        LocalizeParser.ctorParameters = function () {
            return [
                { type: core$1.TranslateService, decorators: [{ type: core.Inject, args: [core$1.TranslateService,] }] },
                { type: common.Location, decorators: [{ type: core.Inject, args: [common.Location,] }] },
                { type: LocalizeRouterSettings, decorators: [{ type: core.Inject, args: [LocalizeRouterSettings,] }] }
            ];
        };
        return LocalizeParser;
    }());
    /**
     * Manually set configuration
     */
    var /**
     * Manually set configuration
     */ ManualParserLoader = (function (_super) {
        __extends(ManualParserLoader, _super);
        /**
         * CTOR
         */
        function ManualParserLoader(translate, location, settings, locales, prefix) {
            if (locales === void 0) {
                locales = ['en'];
            }
            if (prefix === void 0) {
                prefix = 'ROUTES.';
            }
            var _this = _super.call(this, translate, location, settings) || this;
            _this.locales = locales;
            _this.prefix = prefix || '';
            return _this;
        }
        /**
         * Initialize or append routes
         */
        /**
         * Initialize or append routes
         * @param {?} routes
         * @return {?}
         */
        ManualParserLoader.prototype.load = /**
         * Initialize or append routes
         * @param {?} routes
         * @return {?}
         */
            function (routes) {
                var _this = this;
                return new Promise(function (resolve) {
                    _this.init(routes).then(resolve);
                });
            };
        return ManualParserLoader;
    }(LocalizeParser));
    var DummyLocalizeParser = (function (_super) {
        __extends(DummyLocalizeParser, _super);
        function DummyLocalizeParser() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * @param {?} routes
         * @return {?}
         */
        DummyLocalizeParser.prototype.load = /**
         * @param {?} routes
         * @return {?}
         */
            function (routes) {
                var _this = this;
                return new Promise(function (resolve) {
                    _this.init(routes).then(resolve);
                });
            };
        return DummyLocalizeParser;
    }(LocalizeParser));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /**
     * Localization service
     * modifyRoutes
     */
    var LocalizeRouterService = (function () {
        /**
         * CTOR
         */
        function LocalizeRouterService(parser, settings, router$$1, route /*,
        @Inject(Location) private location: Location*/) {
            this.parser = parser;
            this.settings = settings;
            this.router = router$$1;
            this.route = route; /*,
            @Inject(Location) private location: Location*/
            this.routerEvents = new rxjs.Subject();
        }
        /**
         * Start up the service
         */
        /**
         * Start up the service
         * @return {?}
         */
        LocalizeRouterService.prototype.init = /**
         * Start up the service
         * @return {?}
         */
            function () {
                this.router.resetConfig(this.parser.routes);
                // subscribe to router events
                this.router.events
                    .pipe(operators.filter(function (event) { return event instanceof router.NavigationStart; }), operators.pairwise())
                    .subscribe(this._routeChanged());
            };
        /**
         * Change language and navigate to translated route
         */
        /**
         * Change language and navigate to translated route
         * @param {?} lang
         * @param {?=} extras
         * @param {?=} useNavigateMethod
         * @return {?}
         */
        LocalizeRouterService.prototype.changeLanguage = /**
         * Change language and navigate to translated route
         * @param {?} lang
         * @param {?=} extras
         * @param {?=} useNavigateMethod
         * @return {?}
         */
            function (lang, extras, useNavigateMethod) {
                var _this = this;
                // if (this.route) {
                //   console.log(this.route);
                // }
                if (lang !== this.parser.currentLang) {
                    /** @type {?} */
                    var rootSnapshot_1 = this.router.routerState.snapshot.root;
                    this.parser.translateRoutes(lang).subscribe(function () {
                        /** @type {?} */
                        var url = _this.traverseRouteSnapshot(rootSnapshot_1);
                        url = ((_this.translateRoute(url)));
                        if (!_this.settings.alwaysSetPrefix) {
                            /** @type {?} */
                            var urlSegments = url.split('/');
                            /** @type {?} */
                            var languageSegmentIndex = urlSegments.indexOf(_this.parser.currentLang);
                            // If the default language has no prefix make sure to remove and add it when necessary
                            if (_this.parser.currentLang === _this.parser.defaultLang) {
                                // Remove the language prefix from url when current language is the default language
                                if (languageSegmentIndex === 0 || (languageSegmentIndex === 1 && urlSegments[0] === '')) {
                                    // Remove the current aka default language prefix from the url
                                    urlSegments = urlSegments.slice(0, languageSegmentIndex).concat(urlSegments.slice(languageSegmentIndex + 1));
                                }
                            }
                            else {
                                // When coming from a default language it's possible that the url doesn't contain the language, make sure it does.
                                if (languageSegmentIndex === -1) {
                                    // If the url starts with a slash make sure to keep it.
                                    /** @type {?} */
                                    var injectionIndex = urlSegments[0] === '' ? 1 : 0;
                                    urlSegments = urlSegments.slice(0, injectionIndex).concat(_this.parser.currentLang, urlSegments.slice(injectionIndex));
                                }
                            }
                            url = urlSegments.join('/');
                        }
                        /** @type {?} */
                        var lastSlashIndex = url.lastIndexOf('/');
                        if (lastSlashIndex > 0 && lastSlashIndex === url.length - 1) {
                            url = url.slice(0, -1);
                        }
                        _this.router.resetConfig(_this.parser.routes);
                        if (useNavigateMethod) {
                            _this.router.navigate([url], extras);
                        }
                        else {
                            // if (!extras) {
                            //   this.location.replaceState(url); // go(url)
                            // } else {
                            //   this.router.navigateByUrl(url, extras);
                            // }
                            _this.router.navigateByUrl(url, extras);
                        }
                    });
                }
            };
        /**
         * Traverses through the tree to assemble new translated url
         */
        /**
         * Traverses through the tree to assemble new translated url
         * @param {?} snapshot
         * @return {?}
         */
        LocalizeRouterService.prototype.traverseRouteSnapshot = /**
         * Traverses through the tree to assemble new translated url
         * @param {?} snapshot
         * @return {?}
         */
            function (snapshot) {
                if (snapshot.firstChild && snapshot.routeConfig) {
                    return this.parseSegmentValue(snapshot) + "/" + this.traverseRouteSnapshot(snapshot.firstChild);
                }
                else if (snapshot.firstChild) {
                    return this.traverseRouteSnapshot(snapshot.firstChild);
                }
                else {
                    return this.parseSegmentValue(snapshot);
                }
                /* if (snapshot.firstChild && snapshot.firstChild.routeConfig && snapshot.firstChild.routeConfig.path) {
                  if (snapshot.firstChild.routeConfig.path !== '**') {
                    return this.parseSegmentValue(snapshot) + '/' + this.traverseRouteSnapshot(snapshot.firstChild);
                  } else {
                    return this.parseSegmentValue(snapshot.firstChild);
                  }
                }
                return this.parseSegmentValue(snapshot); */
            };
        /**
         * Extracts new segment value based on routeConfig and url
         */
        /**
         * Extracts new segment value based on routeConfig and url
         * @param {?} snapshot
         * @return {?}
         */
        LocalizeRouterService.prototype.parseSegmentValue = /**
         * Extracts new segment value based on routeConfig and url
         * @param {?} snapshot
         * @return {?}
         */
            function (snapshot) {
                if (snapshot.data.localizeRouter) {
                    /** @type {?} */
                    var path = snapshot.data.localizeRouter.path;
                    /** @type {?} */
                    var subPathSegments = path.split('/');
                    return subPathSegments.map(function (s, i) { return s.indexOf(':') === 0 ? snapshot.url[i].path : s; }).join('/');
                }
                else {
                    return '';
                }
                /* if (snapshot.routeConfig) {
                  if (snapshot.routeConfig.path === '**') {
                    return snapshot.url.filter((segment: UrlSegment) => segment.path).map((segment: UrlSegment) => segment.path).join('/');
                  } else {
                    const subPathSegments = snapshot.routeConfig.path.split('/');
                    return subPathSegments.map((s: string, i: number) => s.indexOf(':') === 0 ? snapshot.url[i].path : s).join('/');
                  }
                }
                return ''; */
            };
        /**
         * Translate route to current language
         * If new language is explicitly provided then replace language part in url with new language
         */
        /**
         * Translate route to current language
         * If new language is explicitly provided then replace language part in url with new language
         * @param {?} path
         * @return {?}
         */
        LocalizeRouterService.prototype.translateRoute = /**
         * Translate route to current language
         * If new language is explicitly provided then replace language part in url with new language
         * @param {?} path
         * @return {?}
         */
            function (path) {
                var _this = this;
                if (typeof path === 'string') {
                    /** @type {?} */
                    var url = this.parser.translateRoute(path);
                    return !path.indexOf('/') ? "/" + this.parser.urlPrefix + url : url;
                }
                // it's an array
                /** @type {?} */
                var result = [];
                (((path))).forEach(function (segment, index) {
                    if (typeof segment === 'string') {
                        /** @type {?} */
                        var res = _this.parser.translateRoute(segment);
                        if (!index && !segment.indexOf('/')) {
                            result.push("/" + _this.parser.urlPrefix + res);
                        }
                        else {
                            result.push(res);
                        }
                    }
                    else {
                        result.push(segment);
                    }
                });
                return result;
            };
        /**
         * Event handler to react on route change
         */
        /**
         * Event handler to react on route change
         * @return {?}
         */
        LocalizeRouterService.prototype._routeChanged = /**
         * Event handler to react on route change
         * @return {?}
         */
            function () {
                var _this = this;
                return function (_a) {
                    var _b = __read(_a, 2), previousEvent = _b[0], currentEvent = _b[1];
                    /** @type {?} */
                    var previousLang = _this.parser.currentLang;
                    // this.parser.getLocationLang(previousEvent.url) || this.parser.defaultLang;
                    /** @type {?} */
                    var currentLang = _this.parser.getLocationLang(currentEvent.url) || _this.parser.defaultLang;
                    if (currentLang !== previousLang) {
                        _this.parser.translateRoutes(currentLang).subscribe(function () {
                            _this.router.resetConfig(_this.parser.routes);
                            // Fire route change event
                            _this.routerEvents.next(currentLang);
                        });
                    }
                };
            };
        LocalizeRouterService.ctorParameters = function () {
            return [
                { type: LocalizeParser, decorators: [{ type: core.Inject, args: [LocalizeParser,] }] },
                { type: LocalizeRouterSettings, decorators: [{ type: core.Inject, args: [LocalizeRouterSettings,] }] },
                { type: router.Router, decorators: [{ type: core.Inject, args: [router.Router,] }] },
                { type: router.ActivatedRoute, decorators: [{ type: core.Inject, args: [router.ActivatedRoute,] }] }
            ];
        };
        return LocalizeRouterService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /**
     * Compare if two objects are same
     * @param {?} o1
     * @param {?} o2
     * @return {?}
     */
    function equals(o1, o2) {
        if (o1 === o2) {
            return true;
        }
        if (o1 === null || o2 === null) {
            return false;
        }
        if (o1 !== o1 && o2 !== o2) {
            return true; // NaN === NaN
        }
        /** @type {?} */
        var t1 = typeof o1;
        /** @type {?} */
        var t2 = typeof o2;
        /** @type {?} */
        var length;
        /** @type {?} */
        var key;
        /** @type {?} */
        var keySet;
        if (t1 === t2 && t1 === 'object') {
            if (Array.isArray(o1)) {
                if (!Array.isArray(o2)) {
                    return false;
                }
                if ((length = o1.length) === o2.length) {
                    for (key = 0; key < length; key++) {
                        if (!equals(o1[key], o2[key])) {
                            return false;
                        }
                    }
                    return true;
                }
            }
            else {
                if (Array.isArray(o2)) {
                    return false;
                }
                keySet = Object.create(null);
                for (key in o1) {
                    if (o1.hasOwnProperty(key)) {
                        if (!equals(o1[key], o2[key])) {
                            return false;
                        }
                        keySet[key] = true;
                    }
                }
                for (key in o2) {
                    if (o2.hasOwnProperty(key)) {
                        if (!(key in keySet) && typeof o2[key] !== 'undefined') {
                            return false;
                        }
                    }
                }
                return true;
            }
        }
        return false;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var VIEW_DESTROYED_STATE = 128;
    var LocalizeRouterPipe = (function () {
        /**
         * CTOR
         */
        function LocalizeRouterPipe(localize, _ref) {
            var _this = this;
            this.localize = localize;
            this._ref = _ref;
            this.value = '';
            this.subscription = this.localize.routerEvents.subscribe(function () {
                _this.transform(_this.lastKey);
            });
        }
        /**
         * @return {?}
         */
        LocalizeRouterPipe.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                if (this.subscription) {
                    this.subscription.unsubscribe();
                }
            };
        /**
         * Transform current url to localized one
         */
        /**
         * Transform current url to localized one
         * @param {?} query
         * @return {?}
         */
        LocalizeRouterPipe.prototype.transform = /**
         * Transform current url to localized one
         * @param {?} query
         * @return {?}
         */
            function (query) {
                if (!query || query.length === 0 || !this.localize.parser.currentLang) {
                    return query;
                }
                if (equals(query, this.lastKey) && equals(this.lastLanguage, this.localize.parser.currentLang)) {
                    return this.value;
                }
                this.lastKey = query;
                this.lastLanguage = this.localize.parser.currentLang;
                /** translate key and update values */
                this.value = this.localize.translateRoute(query);
                this.lastKey = query;
                // if view is already destroyed, ignore firing change detection
                if ((((this._ref)))._view.state & VIEW_DESTROYED_STATE) {
                    return this.value;
                }
                this._ref.detectChanges();
                return this.value;
            };
        LocalizeRouterPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'localize',
                        pure: false // required to update the value when the promise is resolved
                    },] },
        ];
        LocalizeRouterPipe.ctorParameters = function () {
            return [
                { type: LocalizeRouterService },
                { type: core.ChangeDetectorRef }
            ];
        };
        return LocalizeRouterPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /**
     * Extension of SystemJsNgModuleLoader to enable localization of route on lazy load
     */
    var LocalizeRouterConfigLoader = (function (_super) {
        __extends(LocalizeRouterConfigLoader, _super);
        function LocalizeRouterConfigLoader(localize, _compiler, config) {
            var _this = _super.call(this, _compiler, config) || this;
            _this.localize = localize;
            return _this;
        }
        /**
         * Extend load with custom functionality
         */
        /**
         * Extend load with custom functionality
         * @param {?} path
         * @return {?}
         */
        LocalizeRouterConfigLoader.prototype.load = /**
         * Extend load with custom functionality
         * @param {?} path
         * @return {?}
         */
            function (path) {
                var _this = this;
                return _super.prototype.load.call(this, path).then(function (factory) {
                    return {
                        moduleType: factory.moduleType,
                        create: function (parentInjector) {
                            /** @type {?} */
                            var module = factory.create(parentInjector);
                            /** @type {?} */
                            var getMethod = module.injector.get.bind(module.injector);
                            module.injector['get'] = function (token, notFoundValue) {
                                /** @type {?} */
                                var getResult = getMethod(token, notFoundValue);
                                if (token === router.ROUTES) {
                                    // translate lazy routes
                                    return _this.localize.initChildRoutes([].concat.apply([], __spread(getResult)));
                                }
                                else {
                                    return getResult;
                                }
                            };
                            return module;
                        }
                    };
                });
            };
        LocalizeRouterConfigLoader.decorators = [
            { type: core.Injectable },
        ];
        LocalizeRouterConfigLoader.ctorParameters = function () {
            return [
                { type: LocalizeParser, decorators: [{ type: core.Inject, args: [core.forwardRef(function () { return LocalizeParser; }),] }] },
                { type: core.Compiler },
                { type: core.SystemJsNgModuleLoaderConfig, decorators: [{ type: core.Optional }] }
            ];
        };
        return LocalizeRouterConfigLoader;
    }(core.SystemJsNgModuleLoader));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var GilsdavReuseStrategy = (function () {
        // private handlers: {[key: string]: DetachedRouteHandle} = {};
        function GilsdavReuseStrategy() {
        }
        /**
         * @param {?} route
         * @return {?}
         */
        GilsdavReuseStrategy.prototype.shouldDetach = /**
         * @param {?} route
         * @return {?}
         */
            function (route) {
                // console.log('shouldDetach', route);
                return false;
            };
        /**
         * @param {?} route
         * @param {?} handle
         * @return {?}
         */
        GilsdavReuseStrategy.prototype.store = /**
         * @param {?} route
         * @param {?} handle
         * @return {?}
         */
            function (route, handle) {
                // console.log('store', route, handle);
                // console.log('store url', this.getKey(route));
                // this.handlers[this.getKey(route)] = handle;
            };
        /**
         * @param {?} route
         * @return {?}
         */
        GilsdavReuseStrategy.prototype.shouldAttach = /**
         * @param {?} route
         * @return {?}
         */
            function (route) {
                // console.log('shouldAttach', route, this.getKey(route));
                // return !!this.handlers[this.getKey(route)];
                return false;
            };
        /**
         * @param {?} route
         * @return {?}
         */
        GilsdavReuseStrategy.prototype.retrieve = /**
         * @param {?} route
         * @return {?}
         */
            function (route) {
                // console.log('retrieve', route);
                // console.log('retrieve url', this.getKey(route));
                // const result = this.handlers[this.getKey(route)];
                // delete this.handlers[this.getKey(route)];
                // return result;
                return null;
            };
        /**
         * @param {?} future
         * @param {?} curr
         * @return {?}
         */
        GilsdavReuseStrategy.prototype.shouldReuseRoute = /**
         * @param {?} future
         * @param {?} curr
         * @return {?}
         */
            function (future, curr) {
                // console.log('shouldReuseRoute', future, curr, this.getKey(future) === this.getKey(curr));
                // console.log('shouldReuseRoute', future && curr ? this.getKey(future) === this.getKey(curr) : false);
                return future && curr ? this.getKey(future) === this.getKey(curr) : false;
            };
        /**
         * @param {?} route
         * @return {?}
         */
        GilsdavReuseStrategy.prototype.getKey = /**
         * @param {?} route
         * @return {?}
         */
            function (route) {
                // console.log(route.parent.component.toString());
                if (!route.data.localizeRouter && (!route.parent || !route.parent.parent)) {
                    return 'LANG';
                }
                else if (route.data.localizeRouter) {
                    return this.getKey(route.parent) + "/" + route.data.localizeRouter.path;
                }
            };
        return GilsdavReuseStrategy;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var ParserInitializer = (function () {
        /**
         * CTOR
         */
        function ParserInitializer(injector) {
            this.injector = injector;
        }
        /**
         * @return {?}
         */
        ParserInitializer.prototype.appInitializer = /**
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var res = this.parser.load(this.routes);
                res.then(function () {
                    /** @type {?} */
                    var localize = _this.injector.get(LocalizeRouterService);
                    localize.init();
                });
                return res;
            };
        /**
         * @param {?} parser
         * @param {?} routes
         * @return {?}
         */
        ParserInitializer.prototype.generateInitializer = /**
         * @param {?} parser
         * @param {?} routes
         * @return {?}
         */
            function (parser, routes) {
                this.parser = parser;
                this.routes = routes.reduce(function (a, b) { return a.concat(b); });
                return this.appInitializer;
            };
        ParserInitializer.decorators = [
            { type: core.Injectable },
        ];
        ParserInitializer.ctorParameters = function () {
            return [
                { type: core.Injector }
            ];
        };
        return ParserInitializer;
    }());
    /**
     * @param {?} p
     * @param {?} parser
     * @param {?} routes
     * @return {?}
     */
    function getAppInitializer(p, parser, routes) {
        return p.generateInitializer(parser, routes).bind(p);
    }
    var LocalizeRouterModule = (function () {
        function LocalizeRouterModule() {
        }
        /**
         * @param {?} routes
         * @param {?=} config
         * @return {?}
         */
        LocalizeRouterModule.forRoot = /**
         * @param {?} routes
         * @param {?=} config
         * @return {?}
         */
            function (routes, config) {
                if (config === void 0) {
                    config = {};
                }
                return {
                    ngModule: LocalizeRouterModule,
                    providers: [
                        {
                            provide: LOCALIZE_ROUTER_FORROOT_GUARD,
                            useFactory: provideForRootGuard,
                            deps: [[LocalizeRouterModule, new core.Optional(), new core.SkipSelf()]]
                        },
                        { provide: USE_CACHED_LANG, useValue: config.useCachedLang },
                        { provide: ALWAYS_SET_PREFIX, useValue: config.alwaysSetPrefix },
                        { provide: CACHE_NAME, useValue: config.cacheName },
                        { provide: CACHE_MECHANISM, useValue: config.cacheMechanism },
                        { provide: DEFAULT_LANG_FUNCTION, useValue: config.defaultLangFunction },
                        LocalizeRouterSettings,
                        config.parser || { provide: LocalizeParser, useClass: DummyLocalizeParser },
                        {
                            provide: RAW_ROUTES,
                            multi: true,
                            useValue: routes
                        },
                        LocalizeRouterService,
                        ParserInitializer,
                        { provide: core.NgModuleFactoryLoader, useClass: LocalizeRouterConfigLoader },
                        {
                            provide: core.APP_INITIALIZER,
                            multi: true,
                            useFactory: getAppInitializer,
                            deps: [ParserInitializer, LocalizeParser, RAW_ROUTES]
                        },
                        {
                            provide: router.RouteReuseStrategy,
                            useClass: GilsdavReuseStrategy
                        }
                    ]
                };
            };
        /**
         * @param {?} routes
         * @return {?}
         */
        LocalizeRouterModule.forChild = /**
         * @param {?} routes
         * @return {?}
         */
            function (routes) {
                return {
                    ngModule: LocalizeRouterModule,
                    providers: [
                        {
                            provide: RAW_ROUTES,
                            multi: true,
                            useValue: routes
                        }
                    ]
                };
            };
        LocalizeRouterModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [common.CommonModule, router.RouterModule, core$1.TranslateModule],
                        declarations: [LocalizeRouterPipe],
                        exports: [LocalizeRouterPipe]
                    },] },
        ];
        return LocalizeRouterModule;
    }());
    /**
     * @param {?} localizeRouterModule
     * @return {?}
     */
    function provideForRootGuard(localizeRouterModule) {
        if (localizeRouterModule) {
            throw new Error("LocalizeRouterModule.forRoot() called twice. Lazy loaded modules should use LocalizeRouterModule.forChild() instead.");
        }
        return 'guarded';
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    exports.ParserInitializer = ParserInitializer;
    exports.getAppInitializer = getAppInitializer;
    exports.LocalizeRouterModule = LocalizeRouterModule;
    exports.provideForRootGuard = provideForRootGuard;
    exports.LocalizeParser = LocalizeParser;
    exports.ManualParserLoader = ManualParserLoader;
    exports.DummyLocalizeParser = DummyLocalizeParser;
    exports.LocalizeRouterService = LocalizeRouterService;
    exports.LocalizeRouterPipe = LocalizeRouterPipe;
    exports.LOCALIZE_ROUTER_FORROOT_GUARD = LOCALIZE_ROUTER_FORROOT_GUARD;
    exports.RAW_ROUTES = RAW_ROUTES;
    exports.USE_CACHED_LANG = USE_CACHED_LANG;
    exports.CACHE_MECHANISM = CACHE_MECHANISM;
    exports.CACHE_NAME = CACHE_NAME;
    exports.DEFAULT_LANG_FUNCTION = DEFAULT_LANG_FUNCTION;
    exports.ALWAYS_SET_PREFIX = ALWAYS_SET_PREFIX;
    exports.LocalizeRouterSettings = LocalizeRouterSettings;
    exports.LocalizeRouterConfigLoader = LocalizeRouterConfigLoader;
    exports.GilsdavReuseStrategy = GilsdavReuseStrategy;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,