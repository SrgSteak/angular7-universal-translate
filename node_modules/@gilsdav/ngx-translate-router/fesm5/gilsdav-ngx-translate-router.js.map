{"version":3,"file":"gilsdav-ngx-translate-router.js.map","sources":["ng://@gilsdav/ngx-translate-router/lib/localize-router.config.ts","ng://@gilsdav/ngx-translate-router/lib/localize-router.parser.ts","ng://@gilsdav/ngx-translate-router/lib/localize-router.service.ts","ng://@gilsdav/ngx-translate-router/lib/util.ts","ng://@gilsdav/ngx-translate-router/lib/localize-router.pipe.ts","ng://@gilsdav/ngx-translate-router/lib/localize-router-config-loader.ts","ng://@gilsdav/ngx-translate-router/lib/gilsdav-reuse-strategy.ts","ng://@gilsdav/ngx-translate-router/lib/localize-router.module.ts"],"sourcesContent":["import { Inject, InjectionToken, Provider } from '@angular/core';\nimport { Routes } from '@angular/router';\nimport { LocalizeRouterModule } from './localize-router.module';\n\n/**\n * Guard to make sure we have single initialization of forRoot\n */\nexport const LOCALIZE_ROUTER_FORROOT_GUARD = new InjectionToken<LocalizeRouterModule>('LOCALIZE_ROUTER_FORROOT_GUARD');\n\n/**\n * Static provider for keeping track of routes\n */\nexport const RAW_ROUTES: InjectionToken<Routes[]> = new InjectionToken<Routes[]>('RAW_ROUTES');\n\n/**\n * Type for Caching of default language\n */\nexport type CacheMechanism = 'LocalStorage' | 'Cookie';\n\n/**\n * Namespace for fail proof access of CacheMechanism\n */\nexport namespace CacheMechanism {\n  export const LocalStorage: CacheMechanism = 'LocalStorage';\n  export const Cookie: CacheMechanism = 'Cookie';\n}\n\n/**\n * Boolean to indicate whether to use cached language value\n */\nexport const USE_CACHED_LANG = new InjectionToken<boolean>('USE_CACHED_LANG');\n/**\n * Cache mechanism type\n */\nexport const CACHE_MECHANISM = new InjectionToken<CacheMechanism>('CACHE_MECHANISM');\n/**\n * Cache name\n */\nexport const CACHE_NAME = new InjectionToken<string>('CACHE_NAME');\n\n/**\n * Type for default language function\n * Used to override basic behaviour\n */\nexport type DefaultLanguageFunction = (languages: string[], cachedLang?: string, browserLang?: string) => string;\n\n/**\n * Function for calculating default language\n */\nexport const DEFAULT_LANG_FUNCTION = new InjectionToken<DefaultLanguageFunction>('DEFAULT_LANG_FUNCTION');\n\n/**\n * Boolean to indicate whether prefix should be set for single language scenarios\n */\nexport const ALWAYS_SET_PREFIX = new InjectionToken<boolean>('ALWAYS_SET_PREFIX');\n\n/**\n * Config interface for LocalizeRouter\n */\nexport interface LocalizeRouterConfig {\n  parser?: Provider;\n  useCachedLang?: boolean;\n  cacheMechanism?: CacheMechanism;\n  cacheName?: string;\n  defaultLangFunction?: DefaultLanguageFunction;\n  alwaysSetPrefix?: boolean;\n}\n\nconst LOCALIZE_CACHE_NAME = 'LOCALIZE_DEFAULT_LANGUAGE';\n\nexport class LocalizeRouterSettings implements LocalizeRouterConfig {\n  /**\n   * Settings for localize router\n   */\n  constructor(\n    @Inject(USE_CACHED_LANG) public useCachedLang: boolean = true,\n    @Inject(ALWAYS_SET_PREFIX) public alwaysSetPrefix: boolean = true,\n    @Inject(CACHE_MECHANISM) public cacheMechanism: CacheMechanism = CacheMechanism.LocalStorage,\n    @Inject(CACHE_NAME) public cacheName: string = LOCALIZE_CACHE_NAME,\n    @Inject(DEFAULT_LANG_FUNCTION) public defaultLangFunction: DefaultLanguageFunction = void 0\n  ) {\n  }\n}\n","import { Routes, Route } from '@angular/router';\nimport { TranslateService } from '@ngx-translate/core';\nimport { Observable, Observer } from 'rxjs';\nimport { Location } from '@angular/common';\nimport { CacheMechanism, LocalizeRouterSettings } from './localize-router.config';\nimport { Inject } from '@angular/core';\n\nconst COOKIE_EXPIRY = 30; // 1 month\n\n/**\n * Abstract class for parsing localization\n */\nexport abstract class LocalizeParser {\n  locales: Array<string>;\n  currentLang: string;\n  routes: Routes;\n  defaultLang: string;\n\n  protected prefix: string;\n\n  private _translationObject: any;\n  private _wildcardRoute: Route;\n  private _languageRoute: Route;\n\n  /**\n   * Loader constructor\n   */\n  constructor(@Inject(TranslateService) private translate: TranslateService,\n    @Inject(Location) private location: Location,\n    @Inject(LocalizeRouterSettings) private settings: LocalizeRouterSettings) {\n  }\n\n  /**\n   * Load routes and fetch necessary data\n   */\n  abstract load(routes: Routes): Promise<any>;\n\n  /**\n * Prepare routes to be fully usable by ngx-translate-router\n * @param routes\n */\n  /* private initRoutes(routes: Routes, prefix = '') {\n    routes.forEach(route => {\n      if (route.path !== '**') {\n        const routeData: any = route.data = route.data || {};\n        routeData.localizeRouter = {};\n        routeData.localizeRouter.fullPath = `${prefix}/${route.path}`;\n        if (route.children && route.children.length > 0) {\n          this.initRoutes(route.children, routeData.localizeRouter.fullPath);\n        }\n      }\n    });\n  } */\n\n\n  /**\n   * Initialize language and routes\n   */\n  protected init(routes: Routes): Promise<any> {\n    let selectedLanguage: string;\n\n    // this.initRoutes(routes);\n    this.routes = routes;\n\n    if (!this.locales || !this.locales.length) {\n      return Promise.resolve();\n    }\n    /** detect current language */\n    const locationLang = this.getLocationLang();\n    const browserLang = this._getBrowserLang();\n\n    if (this.settings.defaultLangFunction) {\n      this.defaultLang = this.settings.defaultLangFunction(this.locales, this._cachedLang, browserLang);\n    } else {\n      this.defaultLang = this._cachedLang || browserLang || this.locales[0];\n    }\n    selectedLanguage = locationLang || this.defaultLang;\n    this.translate.setDefaultLang(this.defaultLang);\n\n    let children: Routes = [];\n    /** if set prefix is enforced */\n    if (this.settings.alwaysSetPrefix) {\n      const baseRoute = { path: '', redirectTo: this.defaultLang, pathMatch: 'full' };\n\n      /** extract potential wildcard route */\n      const wildcardIndex = routes.findIndex((route: Route) => route.path === '**');\n      if (wildcardIndex !== -1) {\n        this._wildcardRoute = routes.splice(wildcardIndex, 1)[0];\n      }\n      children = this.routes.splice(0, this.routes.length, baseRoute);\n    } else {\n      children = [...this.routes]; // shallow copy of routes\n    }\n\n    /** exclude certain routes */\n    for (let i = children.length - 1; i >= 0; i--) {\n      if (children[i].data && children[i].data['skipRouteLocalization']) {\n        if (this.settings.alwaysSetPrefix) {\n          // add directly to routes\n          this.routes.push(children[i]);\n        }\n        children.splice(i, 1);\n      }\n    }\n\n    /** append children routes */\n    if (children && children.length) {\n      if (this.locales.length > 1 || this.settings.alwaysSetPrefix) {\n        this._languageRoute = { children: children };\n        this.routes.unshift(this._languageRoute);\n      }\n    }\n\n    /** ...and potential wildcard route */\n    if (this._wildcardRoute && this.settings.alwaysSetPrefix) {\n      this.routes.push(this._wildcardRoute);\n    }\n\n    /** translate routes */\n    const res = this.translateRoutes(selectedLanguage);\n    return res.toPromise();\n  }\n\n  initChildRoutes(routes: Routes) {\n    this._translateRouteTree(routes);\n    return routes;\n  }\n\n  /**\n   * Translate routes to selected language\n   */\n  translateRoutes(language: string): Observable<any> {\n    return new Observable<any>((observer: Observer<any>) => {\n      this._cachedLang = language;\n      if (this._languageRoute) {\n        this._languageRoute.path = language;\n      }\n\n      this.translate.use(language).subscribe((translations: any) => {\n        this._translationObject = translations;\n        this.currentLang = language;\n\n        if (this._languageRoute) {\n          if (this._languageRoute) {\n            this._translateRouteTree(this._languageRoute.children);\n          }\n          // if there is wildcard route\n          if (this._wildcardRoute && this._wildcardRoute.redirectTo) {\n            this._translateProperty(this._wildcardRoute, 'redirectTo', true);\n          }\n        } else {\n          this._translateRouteTree(this.routes);\n        }\n\n        observer.next(void 0);\n        observer.complete();\n      });\n    });\n  }\n\n  /**\n   * Translate the route node and recursively call for all it's children\n   */\n  private _translateRouteTree(routes: Routes): void {\n    routes.forEach((route: Route) => {\n      if (route.path !== null && route.path !== undefined/* && route.path !== '**'*/) {\n        this._translateProperty(route, 'path');\n      }\n      if (route.redirectTo) {\n        this._translateProperty(route, 'redirectTo', !route.redirectTo.indexOf('/'));\n      }\n      if (route.children) {\n        this._translateRouteTree(route.children);\n      }\n      if (route.loadChildren && (<any>route)._loadedConfig) {\n        this._translateRouteTree((<any>route)._loadedConfig.routes);\n      }\n    });\n  }\n\n  /**\n   * Translate property\n   * If first time translation then add original to route data object\n   */\n  private _translateProperty(route: Route, property: string, prefixLang?: boolean): void {\n    // set property to data if not there yet\n    const routeData: any = route.data = route.data || {};\n    if (!routeData.localizeRouter) {\n      routeData.localizeRouter = {};\n    }\n    if (!routeData.localizeRouter[property]) {\n      routeData.localizeRouter[property] = (<any>route)[property];\n    }\n\n    const result = this.translateRoute(routeData.localizeRouter[property]);\n    (<any>route)[property] = prefixLang ? `/${this.urlPrefix}${result}` : result;\n  }\n\n  get urlPrefix() {\n    return this.settings.alwaysSetPrefix || this.currentLang !== this.defaultLang ? this.currentLang : '';\n  }\n\n  /**\n   * Translate route and return observable\n   */\n  translateRoute(path: string): string {\n    const queryParts = path.split('?');\n    if (queryParts.length > 2) {\n      throw Error('There should be only one query parameter block in the URL');\n    }\n    const pathSegments = queryParts[0].split('/');\n\n    /** collect observables  */\n    return pathSegments\n      .map((part: string) => part.length ? this.translateText(part) : part)\n      .join('/') +\n      (queryParts.length > 1 ? `?${queryParts[1]}` : '');\n  }\n\n  /**\n   * Get language from url\n   */\n  getLocationLang(url?: string): string {\n    const queryParamSplit = (url || this.location.path()).split('?');\n    let pathSlices: string[] = [];\n    if (queryParamSplit.length > 0) {\n      pathSlices = queryParamSplit[0].split('/');\n    }\n    if (pathSlices.length > 1 && this.locales.indexOf(pathSlices[1]) !== -1) {\n      return pathSlices[1];\n    }\n    if (pathSlices.length && this.locales.indexOf(pathSlices[0]) !== -1) {\n      return pathSlices[0];\n    }\n    return null;\n  }\n\n  /**\n   * Get user's language set in the browser\n   */\n  private _getBrowserLang(): string {\n    return this._returnIfInLocales(this.translate.getBrowserLang());\n  }\n\n  /**\n   * Get language from local storage or cookie\n   */\n  private get _cachedLang(): string {\n    if (!this.settings.useCachedLang) {\n      return;\n    }\n    if (this.settings.cacheMechanism === CacheMechanism.LocalStorage) {\n      return this._cacheWithLocalStorage();\n    }\n    if (this.settings.cacheMechanism === CacheMechanism.Cookie) {\n      return this._cacheWithCookies();\n    }\n  }\n\n  /**\n   * Save language to local storage or cookie\n   */\n  private set _cachedLang(value: string) {\n    if (!this.settings.useCachedLang) {\n      return;\n    }\n    if (this.settings.cacheMechanism === CacheMechanism.LocalStorage) {\n      this._cacheWithLocalStorage(value);\n    }\n    if (this.settings.cacheMechanism === CacheMechanism.Cookie) {\n      this._cacheWithCookies(value);\n    }\n  }\n\n  /**\n   * Cache value to local storage\n   */\n  private _cacheWithLocalStorage(value?: string): string {\n    if (typeof window === 'undefined' || typeof window.localStorage === 'undefined') {\n      return;\n    }\n    try {\n      if (value) {\n        window.localStorage.setItem(this.settings.cacheName, value);\n        return;\n      }\n      return this._returnIfInLocales(window.localStorage.getItem(this.settings.cacheName));\n    } catch (e) {\n      // weird Safari issue in private mode, where LocalStorage is defined but throws error on access\n      return;\n    }\n  }\n\n  /**\n   * Cache value via cookies\n   */\n  private _cacheWithCookies(value?: string): string {\n    if (typeof document === 'undefined' || typeof document.cookie === 'undefined') {\n      return;\n    }\n    try {\n      const name = encodeURIComponent(this.settings.cacheName);\n      if (value) {\n        const d: Date = new Date();\n        d.setTime(d.getTime() + COOKIE_EXPIRY * 86400000); // * days\n        document.cookie = `${name}=${encodeURIComponent(value)};expires=${d.toUTCString()}`;\n        return;\n      }\n      const regexp = new RegExp('(?:^' + name + '|;\\\\s*' + name + ')=(.*?)(?:;|$)', 'g');\n      const result = regexp.exec(document.cookie);\n      return decodeURIComponent(result[1]);\n    } catch (e) {\n      return; // should not happen but better safe than sorry\n    }\n  }\n\n  /**\n   * Check if value exists in locales list\n   */\n  private _returnIfInLocales(value: string): string {\n    if (value && this.locales.indexOf(value) !== -1) {\n      return value;\n    }\n    return null;\n  }\n\n  /**\n   * Get translated value\n   */\n  private translateText(key: string): string {\n    if (!this._translationObject) {\n      return key;\n    }\n    const fullKey = this.prefix + key;\n    const res = this.translate.getParsedResult(this._translationObject, fullKey);\n    return res !== fullKey ? res : key;\n  }\n}\n\n/**\n * Manually set configuration\n */\nexport class ManualParserLoader extends LocalizeParser {\n\n  /**\n   * CTOR\n   */\n  constructor(translate: TranslateService, location: Location, settings: LocalizeRouterSettings,\n    locales: string[] = ['en'], prefix: string = 'ROUTES.') {\n    super(translate, location, settings);\n    this.locales = locales;\n    this.prefix = prefix || '';\n  }\n\n  /**\n   * Initialize or append routes\n   */\n  load(routes: Routes): Promise<any> {\n    return new Promise((resolve: any) => {\n      this.init(routes).then(resolve);\n    });\n  }\n}\n\nexport class DummyLocalizeParser extends LocalizeParser {\n  load(routes: Routes): Promise<any> {\n    return new Promise((resolve: any) => {\n      this.init(routes).then(resolve);\n    });\n  }\n}\n","import { Inject } from '@angular/core';\n// import { Location } from '@angular/common';\nimport { Router, NavigationStart, ActivatedRouteSnapshot, NavigationExtras, ActivatedRoute } from '@angular/router';\nimport { Subject } from 'rxjs';\nimport { filter, pairwise } from 'rxjs/operators';\n\nimport { LocalizeParser } from './localize-router.parser';\nimport { LocalizeRouterSettings } from './localize-router.config';\n\n/**\n * Localization service\n * modifyRoutes\n */\nexport class LocalizeRouterService {\n  routerEvents: Subject<string>;\n\n  /**\n   * CTOR\n   */\n  constructor(\n      @Inject(LocalizeParser) public parser: LocalizeParser,\n      @Inject(LocalizeRouterSettings) public settings: LocalizeRouterSettings,\n      @Inject(Router) private router: Router,\n      @Inject(ActivatedRoute) private route: ActivatedRoute/*,\n      @Inject(Location) private location: Location*/\n    ) {\n      this.routerEvents = new Subject<string>();\n  }\n\n  /**\n   * Start up the service\n   */\n  init(): void {\n    this.router.resetConfig(this.parser.routes);\n    // subscribe to router events\n    this.router.events\n      .pipe(\n        filter(event => event instanceof NavigationStart),\n        pairwise()\n      )\n      .subscribe(this._routeChanged());\n  }\n\n  /**\n   * Change language and navigate to translated route\n   */\n  changeLanguage(lang: string, extras?: NavigationExtras, useNavigateMethod?: boolean): void {\n    // if (this.route) {\n    //   console.log(this.route);\n    // }\n    if (lang !== this.parser.currentLang) {\n      const rootSnapshot: ActivatedRouteSnapshot = this.router.routerState.snapshot.root;\n\n      this.parser.translateRoutes(lang).subscribe(() => {\n\n        let url = this.traverseRouteSnapshot(rootSnapshot);\n        url = this.translateRoute(url) as string;\n\n        if (!this.settings.alwaysSetPrefix) {\n          let urlSegments = url.split('/');\n          const languageSegmentIndex = urlSegments.indexOf(this.parser.currentLang);\n          // If the default language has no prefix make sure to remove and add it when necessary\n          if (this.parser.currentLang === this.parser.defaultLang) {\n            // Remove the language prefix from url when current language is the default language\n            if (languageSegmentIndex === 0 || (languageSegmentIndex === 1 && urlSegments[0] === '')) {\n              // Remove the current aka default language prefix from the url\n              urlSegments = urlSegments.slice(0, languageSegmentIndex).concat(urlSegments.slice(languageSegmentIndex + 1));\n            }\n          } else {\n            // When coming from a default language it's possible that the url doesn't contain the language, make sure it does.\n            if (languageSegmentIndex === -1) {\n              // If the url starts with a slash make sure to keep it.\n              const injectionIndex = urlSegments[0] === '' ? 1 : 0;\n              urlSegments = urlSegments.slice(0, injectionIndex).concat(this.parser.currentLang, urlSegments.slice(injectionIndex));\n            }\n          }\n          url = urlSegments.join('/');\n        }\n\n        const lastSlashIndex = url.lastIndexOf('/');\n        if (lastSlashIndex > 0 && lastSlashIndex === url.length - 1) {\n          url = url.slice(0, -1);\n        }\n\n        this.router.resetConfig(this.parser.routes);\n        if (useNavigateMethod) {\n          this.router.navigate([url], extras);\n        } else {\n          // if (!extras) {\n          //   this.location.replaceState(url); // go(url)\n          // } else {\n          //   this.router.navigateByUrl(url, extras);\n          // }\n          this.router.navigateByUrl(url, extras);\n        }\n      });\n    }\n  }\n\n  /**\n   * Traverses through the tree to assemble new translated url\n   */\n  private traverseRouteSnapshot(snapshot: ActivatedRouteSnapshot): string {\n\n    if (snapshot.firstChild && snapshot.routeConfig) {\n      return `${this.parseSegmentValue(snapshot)}/${this.traverseRouteSnapshot(snapshot.firstChild)}`;\n    } else if (snapshot.firstChild) {\n      return this.traverseRouteSnapshot(snapshot.firstChild);\n    } else {\n      return this.parseSegmentValue(snapshot);\n    }\n    /* if (snapshot.firstChild && snapshot.firstChild.routeConfig && snapshot.firstChild.routeConfig.path) {\n      if (snapshot.firstChild.routeConfig.path !== '**') {\n        return this.parseSegmentValue(snapshot) + '/' + this.traverseRouteSnapshot(snapshot.firstChild);\n      } else {\n        return this.parseSegmentValue(snapshot.firstChild);\n      }\n    }\n    return this.parseSegmentValue(snapshot); */\n  }\n\n  /**\n   * Extracts new segment value based on routeConfig and url\n   */\n  private parseSegmentValue(snapshot: ActivatedRouteSnapshot): string {\n    if (snapshot.data.localizeRouter) {\n      const path = snapshot.data.localizeRouter.path;\n      const subPathSegments = path.split('/');\n      return subPathSegments.map((s: string, i: number) => s.indexOf(':') === 0 ? snapshot.url[i].path : s).join('/');\n    } else {\n      return '';\n    }\n    /* if (snapshot.routeConfig) {\n      if (snapshot.routeConfig.path === '**') {\n        return snapshot.url.filter((segment: UrlSegment) => segment.path).map((segment: UrlSegment) => segment.path).join('/');\n      } else {\n        const subPathSegments = snapshot.routeConfig.path.split('/');\n        return subPathSegments.map((s: string, i: number) => s.indexOf(':') === 0 ? snapshot.url[i].path : s).join('/');\n      }\n    }\n    return ''; */\n  }\n\n  /**\n   * Translate route to current language\n   * If new language is explicitly provided then replace language part in url with new language\n   */\n  translateRoute(path: string | any[]): string | any[] {\n    if (typeof path === 'string') {\n      const url = this.parser.translateRoute(path);\n      return !path.indexOf('/') ? `/${this.parser.urlPrefix}${url}` : url;\n    }\n    // it's an array\n    const result: any[] = [];\n    (path as Array<any>).forEach((segment: any, index: number) => {\n      if (typeof segment === 'string') {\n        const res = this.parser.translateRoute(segment);\n        if (!index && !segment.indexOf('/')) {\n          result.push(`/${this.parser.urlPrefix}${res}`);\n        } else {\n          result.push(res);\n        }\n      } else {\n        result.push(segment);\n      }\n    });\n    return result;\n  }\n\n  /**\n   * Event handler to react on route change\n   */\n  private _routeChanged(): (eventPair: [NavigationStart, NavigationStart]) => void {\n    return ([previousEvent, currentEvent]: [NavigationStart, NavigationStart]) => {\n      const previousLang = this.parser.currentLang; // this.parser.getLocationLang(previousEvent.url) || this.parser.defaultLang;\n      const currentLang = this.parser.getLocationLang(currentEvent.url) || this.parser.defaultLang;\n      if (currentLang !== previousLang) {\n        this.parser.translateRoutes(currentLang).subscribe(() => {\n          this.router.resetConfig(this.parser.routes);\n          // Fire route change event\n          this.routerEvents.next(currentLang);\n        });\n      }\n    };\n  }\n}\n","/**\n * Compare if two objects are same\n */\nexport function equals(o1: any, o2: any): boolean {\n  if (o1 === o2) {\n    return true;\n  }\n  if (o1 === null || o2 === null) {\n    return false;\n  }\n  if (o1 !== o1 && o2 !== o2) {\n    return true; // NaN === NaN\n  }\n  const t1 = typeof o1,\n    t2 = typeof o2;\n  let length: number,\n    key: any,\n    keySet: any;\n\n  if (t1 === t2 && t1 === 'object') {\n    if (Array.isArray(o1)) {\n      if (!Array.isArray(o2)) {\n        return false;\n      }\n      if ((length = o1.length) === o2.length) {\n        for (key = 0; key < length; key++) {\n          if (!equals(o1[key], o2[key])) {\n            return false;\n          }\n        }\n        return true;\n      }\n    } else {\n      if (Array.isArray(o2)) {\n        return false;\n      }\n      keySet = Object.create(null);\n      for (key in o1) {\n        if (o1.hasOwnProperty(key)) {\n          if (!equals(o1[key], o2[key])) {\n            return false;\n          }\n          keySet[key] = true;\n        }\n      }\n      for (key in o2) {\n        if (o2.hasOwnProperty(key)) {\n          if (!(key in keySet) && typeof o2[key] !== 'undefined') {\n            return false;\n          }\n        }\n      }\n      return true;\n    }\n  }\n  return false;\n}\n","import { PipeTransform, Pipe, ChangeDetectorRef, OnDestroy } from '@angular/core';\nimport { LocalizeRouterService } from './localize-router.service';\nimport { Subscription } from 'rxjs';\nimport { equals } from './util';\n\nconst VIEW_DESTROYED_STATE = 128;\n\n@Pipe({\n  name: 'localize',\n  pure: false // required to update the value when the promise is resolved\n})\nexport class LocalizeRouterPipe implements PipeTransform, OnDestroy {\n  private value: string | any[] = '';\n  private lastKey: string | any[];\n  private lastLanguage: string;\n  private subscription: Subscription;\n\n  /**\n   * CTOR\n   */\n  constructor(private localize: LocalizeRouterService, private _ref: ChangeDetectorRef) {\n    this.subscription = this.localize.routerEvents.subscribe(() => {\n      this.transform(this.lastKey);\n    });\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  /**\n   * Transform current url to localized one\n   */\n  transform(query: string | any[]): string | any[] {\n    if (!query || query.length === 0 || !this.localize.parser.currentLang) {\n      return query;\n    }\n    if (equals(query, this.lastKey) && equals(this.lastLanguage, this.localize.parser.currentLang)) {\n      return this.value;\n    }\n    this.lastKey = query;\n    this.lastLanguage = this.localize.parser.currentLang;\n\n    /** translate key and update values */\n    this.value = this.localize.translateRoute(query);\n    this.lastKey = query;\n    // if view is already destroyed, ignore firing change detection\n    if ((<any> this._ref)._view.state & VIEW_DESTROYED_STATE) {\n      return this.value;\n    }\n    this._ref.detectChanges();\n    return this.value;\n  }\n}\n","import { ROUTES } from '@angular/router';\nimport {\n  SystemJsNgModuleLoader, NgModuleFactory, Injector,\n  SystemJsNgModuleLoaderConfig, Optional, Compiler, Injectable, Inject, forwardRef\n} from '@angular/core';\nimport { LocalizeParser } from './localize-router.parser';\n\n/**\n * Extension of SystemJsNgModuleLoader to enable localization of route on lazy load\n */\n@Injectable()\nexport class LocalizeRouterConfigLoader extends SystemJsNgModuleLoader {\n\n  constructor(@Inject(forwardRef(() => LocalizeParser)) private localize: LocalizeParser,\n    _compiler: Compiler, @Optional() config?: SystemJsNgModuleLoaderConfig) {\n      super(_compiler, config);\n  }\n\n  /**\n   * Extend load with custom functionality\n   */\n  load(path: string): Promise<NgModuleFactory<any>> {\n    return super.load(path).then((factory: NgModuleFactory<any>) => {\n      return {\n        moduleType: factory.moduleType,\n        create: (parentInjector: Injector) => {\n          const module = factory.create(parentInjector);\n          const getMethod = module.injector.get.bind(module.injector);\n\n          module.injector['get'] = (token: any, notFoundValue: any) => {\n            const getResult = getMethod(token, notFoundValue);\n\n            if (token === ROUTES) {\n              // translate lazy routes\n              return this.localize.initChildRoutes([].concat(...getResult));\n            } else {\n              return getResult;\n            }\n          };\n          return module;\n        }\n      };\n    });\n  }\n}\n","import { RouteReuseStrategy, DetachedRouteHandle, ActivatedRouteSnapshot } from '@angular/router';\n\nexport class GilsdavReuseStrategy implements RouteReuseStrategy {\n  // private handlers: {[key: string]: DetachedRouteHandle} = {};\n  constructor() {\n  }\n  shouldDetach(route: ActivatedRouteSnapshot): boolean {\n    // console.log('shouldDetach', route);\n    return false;\n  }\n  store(route: ActivatedRouteSnapshot, handle: DetachedRouteHandle): void {\n    // console.log('store', route, handle);\n    // console.log('store url', this.getKey(route));\n    // this.handlers[this.getKey(route)] = handle;\n  }\n  shouldAttach(route: ActivatedRouteSnapshot): boolean {\n    // console.log('shouldAttach', route, this.getKey(route));\n    // return !!this.handlers[this.getKey(route)];\n    return false;\n  }\n  retrieve(route: ActivatedRouteSnapshot): DetachedRouteHandle {\n    // console.log('retrieve', route);\n    // console.log('retrieve url', this.getKey(route));\n    // const result = this.handlers[this.getKey(route)];\n    // delete this.handlers[this.getKey(route)];\n    // return result;\n    return null;\n  }\n  shouldReuseRoute(future: ActivatedRouteSnapshot, curr: ActivatedRouteSnapshot): boolean {\n    // console.log('shouldReuseRoute', future, curr, this.getKey(future) === this.getKey(curr));\n    // console.log('shouldReuseRoute', future && curr ? this.getKey(future) === this.getKey(curr) : false);\n    return future && curr ? this.getKey(future) === this.getKey(curr) : false;\n  }\n  private getKey(route: ActivatedRouteSnapshot) {\n    // console.log(route.parent.component.toString());\n    if (!route.data.localizeRouter && (!route.parent || !route.parent.parent)) { // Lang route\n      return 'LANG';\n    } else if (route.data.localizeRouter) {\n      return `${this.getKey(route.parent)}/${route.data.localizeRouter.path}`;\n    }\n  }\n}\n","import {\n  NgModule, ModuleWithProviders, APP_INITIALIZER, Optional, SkipSelf,\n  Injectable, Injector, NgModuleFactoryLoader\n} from '@angular/core';\nimport { LocalizeRouterService } from './localize-router.service';\nimport { DummyLocalizeParser, LocalizeParser } from './localize-router.parser';\nimport { RouterModule, Routes, RouteReuseStrategy } from '@angular/router';\nimport { LocalizeRouterPipe } from './localize-router.pipe';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { CommonModule } from '@angular/common';\nimport {\n  ALWAYS_SET_PREFIX,\n  CACHE_MECHANISM, CACHE_NAME, DEFAULT_LANG_FUNCTION, LOCALIZE_ROUTER_FORROOT_GUARD, LocalizeRouterConfig, LocalizeRouterSettings,\n  RAW_ROUTES,\n  USE_CACHED_LANG\n} from './localize-router.config';\nimport { LocalizeRouterConfigLoader } from './localize-router-config-loader';\nimport { GilsdavReuseStrategy } from './gilsdav-reuse-strategy';\n\n@Injectable()\nexport class ParserInitializer {\n  parser: LocalizeParser;\n  routes: Routes;\n\n  /**\n   * CTOR\n   */\n  constructor(private injector: Injector) {\n  }\n\n  appInitializer(): Promise<any> {\n    const res = this.parser.load(this.routes);\n    res.then(() => {\n      const localize: LocalizeRouterService = this.injector.get(LocalizeRouterService);\n      localize.init();\n    });\n\n    return res;\n  }\n\n  generateInitializer(parser: LocalizeParser, routes: Routes[]): () => Promise<any> {\n    this.parser = parser;\n    this.routes = routes.reduce((a, b) => a.concat(b));\n    return this.appInitializer;\n  }\n}\n\nexport function getAppInitializer(p: ParserInitializer, parser: LocalizeParser, routes: Routes[]): any {\n  return p.generateInitializer(parser, routes).bind(p);\n}\n\n@NgModule({\n  imports: [CommonModule, RouterModule, TranslateModule],\n  declarations: [LocalizeRouterPipe],\n  exports: [LocalizeRouterPipe]\n})\nexport class LocalizeRouterModule {\n\n  static forRoot(routes: Routes, config: LocalizeRouterConfig = {}): ModuleWithProviders {\n    return {\n      ngModule: LocalizeRouterModule,\n      providers: [\n        {\n          provide: LOCALIZE_ROUTER_FORROOT_GUARD,\n          useFactory: provideForRootGuard,\n          deps: [[LocalizeRouterModule, new Optional(), new SkipSelf()]]\n        },\n        { provide: USE_CACHED_LANG, useValue: config.useCachedLang },\n        { provide: ALWAYS_SET_PREFIX, useValue: config.alwaysSetPrefix },\n        { provide: CACHE_NAME, useValue: config.cacheName },\n        { provide: CACHE_MECHANISM, useValue: config.cacheMechanism },\n        { provide: DEFAULT_LANG_FUNCTION, useValue: config.defaultLangFunction },\n        LocalizeRouterSettings,\n        config.parser || { provide: LocalizeParser, useClass: DummyLocalizeParser },\n        {\n          provide: RAW_ROUTES,\n          multi: true,\n          useValue: routes\n        },\n        LocalizeRouterService,\n        ParserInitializer,\n        { provide: NgModuleFactoryLoader, useClass: LocalizeRouterConfigLoader },\n        {\n          provide: APP_INITIALIZER,\n          multi: true,\n          useFactory: getAppInitializer,\n          deps: [ParserInitializer, LocalizeParser, RAW_ROUTES]\n        },\n        {\n          provide: RouteReuseStrategy,\n          useClass: GilsdavReuseStrategy\n        }\n      ]\n    };\n  }\n\n  static forChild(routes: Routes): ModuleWithProviders {\n    return {\n      ngModule: LocalizeRouterModule,\n      providers: [\n        {\n          provide: RAW_ROUTES,\n          multi: true,\n          useValue: routes\n        }\n      ]\n    };\n  }\n}\n\nexport function provideForRootGuard(localizeRouterModule: LocalizeRouterModule): string {\n  if (localizeRouterModule) {\n    throw new Error(\n      `LocalizeRouterModule.forRoot() called twice. Lazy loaded modules should use LocalizeRouterModule.forChild() instead.`);\n  }\n  return 'guarded';\n}\n"],"names":["tslib_1.__extends"],"mappings":"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"}
