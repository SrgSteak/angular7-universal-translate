/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var GilsdavReuseStrategy = /** @class */ (function () {
    // private handlers: {[key: string]: DetachedRouteHandle} = {};
    function GilsdavReuseStrategy() {
    }
    /**
     * @param {?} route
     * @return {?}
     */
    GilsdavReuseStrategy.prototype.shouldDetach = /**
     * @param {?} route
     * @return {?}
     */
    function (route) {
        // console.log('shouldDetach', route);
        return false;
    };
    /**
     * @param {?} route
     * @param {?} handle
     * @return {?}
     */
    GilsdavReuseStrategy.prototype.store = /**
     * @param {?} route
     * @param {?} handle
     * @return {?}
     */
    function (route, handle) {
        // console.log('store', route, handle);
        // console.log('store url', this.getKey(route));
        // this.handlers[this.getKey(route)] = handle;
    };
    /**
     * @param {?} route
     * @return {?}
     */
    GilsdavReuseStrategy.prototype.shouldAttach = /**
     * @param {?} route
     * @return {?}
     */
    function (route) {
        // console.log('shouldAttach', route, this.getKey(route));
        // return !!this.handlers[this.getKey(route)];
        return false;
    };
    /**
     * @param {?} route
     * @return {?}
     */
    GilsdavReuseStrategy.prototype.retrieve = /**
     * @param {?} route
     * @return {?}
     */
    function (route) {
        // console.log('retrieve', route);
        // console.log('retrieve url', this.getKey(route));
        // const result = this.handlers[this.getKey(route)];
        // delete this.handlers[this.getKey(route)];
        // return result;
        return null;
    };
    /**
     * @param {?} future
     * @param {?} curr
     * @return {?}
     */
    GilsdavReuseStrategy.prototype.shouldReuseRoute = /**
     * @param {?} future
     * @param {?} curr
     * @return {?}
     */
    function (future, curr) {
        // console.log('shouldReuseRoute', future, curr, this.getKey(future) === this.getKey(curr));
        // console.log('shouldReuseRoute', future && curr ? this.getKey(future) === this.getKey(curr) : false);
        return future && curr ? this.getKey(future) === this.getKey(curr) : false;
    };
    /**
     * @param {?} route
     * @return {?}
     */
    GilsdavReuseStrategy.prototype.getKey = /**
     * @param {?} route
     * @return {?}
     */
    function (route) {
        // console.log(route.parent.component.toString());
        if (!route.data.localizeRouter && (!route.parent || !route.parent.parent)) {
            return 'LANG';
        }
        else if (route.data.localizeRouter) {
            return this.getKey(route.parent) + "/" + route.data.localizeRouter.path;
        }
    };
    return GilsdavReuseStrategy;
}());
export { GilsdavReuseStrategy };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2lsc2Rhdi1yZXVzZS1zdHJhdGVneS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BnaWxzZGF2L25neC10cmFuc2xhdGUtcm91dGVyLyIsInNvdXJjZXMiOlsibGliL2dpbHNkYXYtcmV1c2Utc3RyYXRlZ3kudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUVBO0lBQ0UsK0RBQStEO0lBQy9EO0lBQ0EsQ0FBQzs7Ozs7SUFDRCwyQ0FBWTs7OztJQUFaLFVBQWEsS0FBNkI7UUFDeEMsc0NBQXNDO1FBQ3RDLE1BQU0sQ0FBQyxLQUFLLENBQUM7SUFDZixDQUFDOzs7Ozs7SUFDRCxvQ0FBSzs7Ozs7SUFBTCxVQUFNLEtBQTZCLEVBQUUsTUFBMkI7UUFDOUQsdUNBQXVDO1FBQ3ZDLGdEQUFnRDtRQUNoRCw4Q0FBOEM7SUFDaEQsQ0FBQzs7Ozs7SUFDRCwyQ0FBWTs7OztJQUFaLFVBQWEsS0FBNkI7UUFDeEMsMERBQTBEO1FBQzFELDhDQUE4QztRQUM5QyxNQUFNLENBQUMsS0FBSyxDQUFDO0lBQ2YsQ0FBQzs7Ozs7SUFDRCx1Q0FBUTs7OztJQUFSLFVBQVMsS0FBNkI7UUFDcEMsa0NBQWtDO1FBQ2xDLG1EQUFtRDtRQUNuRCxvREFBb0Q7UUFDcEQsNENBQTRDO1FBQzVDLGlCQUFpQjtRQUNqQixNQUFNLENBQUMsSUFBSSxDQUFDO0lBQ2QsQ0FBQzs7Ozs7O0lBQ0QsK0NBQWdCOzs7OztJQUFoQixVQUFpQixNQUE4QixFQUFFLElBQTRCO1FBQzNFLDRGQUE0RjtRQUM1Rix1R0FBdUc7UUFDdkcsTUFBTSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEtBQUssSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO0lBQzVFLENBQUM7Ozs7O0lBQ08scUNBQU07Ozs7SUFBZCxVQUFlLEtBQTZCO1FBQzFDLGtEQUFrRDtRQUNsRCxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsY0FBYyxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBTSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDMUUsTUFBTSxDQUFDLE1BQU0sQ0FBQztRQUNoQixDQUFDO1FBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQztZQUNyQyxNQUFNLENBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLFNBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBTSxDQUFDO1FBQzFFLENBQUM7SUFDSCxDQUFDO0lBQ0gsMkJBQUM7QUFBRCxDQUFDLEFBdkNELElBdUNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUm91dGVSZXVzZVN0cmF0ZWd5LCBEZXRhY2hlZFJvdXRlSGFuZGxlLCBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90IH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcblxuZXhwb3J0IGNsYXNzIEdpbHNkYXZSZXVzZVN0cmF0ZWd5IGltcGxlbWVudHMgUm91dGVSZXVzZVN0cmF0ZWd5IHtcbiAgLy8gcHJpdmF0ZSBoYW5kbGVyczoge1trZXk6IHN0cmluZ106IERldGFjaGVkUm91dGVIYW5kbGV9ID0ge307XG4gIGNvbnN0cnVjdG9yKCkge1xuICB9XG4gIHNob3VsZERldGFjaChyb3V0ZTogQWN0aXZhdGVkUm91dGVTbmFwc2hvdCk6IGJvb2xlYW4ge1xuICAgIC8vIGNvbnNvbGUubG9nKCdzaG91bGREZXRhY2gnLCByb3V0ZSk7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHN0b3JlKHJvdXRlOiBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90LCBoYW5kbGU6IERldGFjaGVkUm91dGVIYW5kbGUpOiB2b2lkIHtcbiAgICAvLyBjb25zb2xlLmxvZygnc3RvcmUnLCByb3V0ZSwgaGFuZGxlKTtcbiAgICAvLyBjb25zb2xlLmxvZygnc3RvcmUgdXJsJywgdGhpcy5nZXRLZXkocm91dGUpKTtcbiAgICAvLyB0aGlzLmhhbmRsZXJzW3RoaXMuZ2V0S2V5KHJvdXRlKV0gPSBoYW5kbGU7XG4gIH1cbiAgc2hvdWxkQXR0YWNoKHJvdXRlOiBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90KTogYm9vbGVhbiB7XG4gICAgLy8gY29uc29sZS5sb2coJ3Nob3VsZEF0dGFjaCcsIHJvdXRlLCB0aGlzLmdldEtleShyb3V0ZSkpO1xuICAgIC8vIHJldHVybiAhIXRoaXMuaGFuZGxlcnNbdGhpcy5nZXRLZXkocm91dGUpXTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0cmlldmUocm91dGU6IEFjdGl2YXRlZFJvdXRlU25hcHNob3QpOiBEZXRhY2hlZFJvdXRlSGFuZGxlIHtcbiAgICAvLyBjb25zb2xlLmxvZygncmV0cmlldmUnLCByb3V0ZSk7XG4gICAgLy8gY29uc29sZS5sb2coJ3JldHJpZXZlIHVybCcsIHRoaXMuZ2V0S2V5KHJvdXRlKSk7XG4gICAgLy8gY29uc3QgcmVzdWx0ID0gdGhpcy5oYW5kbGVyc1t0aGlzLmdldEtleShyb3V0ZSldO1xuICAgIC8vIGRlbGV0ZSB0aGlzLmhhbmRsZXJzW3RoaXMuZ2V0S2V5KHJvdXRlKV07XG4gICAgLy8gcmV0dXJuIHJlc3VsdDtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBzaG91bGRSZXVzZVJvdXRlKGZ1dHVyZTogQWN0aXZhdGVkUm91dGVTbmFwc2hvdCwgY3VycjogQWN0aXZhdGVkUm91dGVTbmFwc2hvdCk6IGJvb2xlYW4ge1xuICAgIC8vIGNvbnNvbGUubG9nKCdzaG91bGRSZXVzZVJvdXRlJywgZnV0dXJlLCBjdXJyLCB0aGlzLmdldEtleShmdXR1cmUpID09PSB0aGlzLmdldEtleShjdXJyKSk7XG4gICAgLy8gY29uc29sZS5sb2coJ3Nob3VsZFJldXNlUm91dGUnLCBmdXR1cmUgJiYgY3VyciA/IHRoaXMuZ2V0S2V5KGZ1dHVyZSkgPT09IHRoaXMuZ2V0S2V5KGN1cnIpIDogZmFsc2UpO1xuICAgIHJldHVybiBmdXR1cmUgJiYgY3VyciA/IHRoaXMuZ2V0S2V5KGZ1dHVyZSkgPT09IHRoaXMuZ2V0S2V5KGN1cnIpIDogZmFsc2U7XG4gIH1cbiAgcHJpdmF0ZSBnZXRLZXkocm91dGU6IEFjdGl2YXRlZFJvdXRlU25hcHNob3QpIHtcbiAgICAvLyBjb25zb2xlLmxvZyhyb3V0ZS5wYXJlbnQuY29tcG9uZW50LnRvU3RyaW5nKCkpO1xuICAgIGlmICghcm91dGUuZGF0YS5sb2NhbGl6ZVJvdXRlciAmJiAoIXJvdXRlLnBhcmVudCB8fCAhcm91dGUucGFyZW50LnBhcmVudCkpIHsgLy8gTGFuZyByb3V0ZVxuICAgICAgcmV0dXJuICdMQU5HJztcbiAgICB9IGVsc2UgaWYgKHJvdXRlLmRhdGEubG9jYWxpemVSb3V0ZXIpIHtcbiAgICAgIHJldHVybiBgJHt0aGlzLmdldEtleShyb3V0ZS5wYXJlbnQpfS8ke3JvdXRlLmRhdGEubG9jYWxpemVSb3V0ZXIucGF0aH1gO1xuICAgIH1cbiAgfVxufVxuIl19