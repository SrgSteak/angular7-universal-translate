/**
 * Inspired by :
 * - https://github.com/angular/universal/blob/1916fec006191d63bb8b923f04179f056e39dc60/modules/module-map-ngfactory-loader/src/module-map-ngfactory-loader.ts
 * - https://github.com/Greentube/localize-router/blob/master/src/localize-router-config-loader.ts
 */
import { Injectable, Inject, Compiler, forwardRef } from '@angular/core';
import { MODULE_MAP } from '@nguniversal/module-map-ngfactory-loader';
import { ROUTES } from '@angular/router';
import { LocalizeParser } from 'localize-router';
/**
 * NgModuleFactoryLoader which does not lazy load
 */
var LazyUniversalModuleLoader = (function () {
    function LazyUniversalModuleLoader(localize, compiler, moduleMap) {
        this.localize = localize;
        this.compiler = compiler;
        this.moduleMap = moduleMap;
    }
    LazyUniversalModuleLoader.prototype.load = function (loadChildrenString) {
        var _this = this;
        var offlineMode = this.compiler instanceof Compiler;
        var type = this.moduleMap[loadChildrenString];
        if (!type) {
            throw new Error(loadChildrenString + " did not exist in the MODULE_MAP");
        }
        return (offlineMode ?
            this.loadFactory(type) : this.loadAndCompile(type))
            .then(function (factory) { return _this.localizeFactory(factory); });
    };
    LazyUniversalModuleLoader.prototype.loadFactory = function (factory) {
        return new Promise(function (resolve) { return resolve(factory); });
    };
    LazyUniversalModuleLoader.prototype.loadAndCompile = function (type) {
        return this.compiler.compileModuleAsync(type);
    };
    LazyUniversalModuleLoader.prototype.localizeFactory = function (factory) {
        var _this = this;
        return {
            moduleType: factory.moduleType,
            create: function (parentInjector) {
                var module = factory.create(parentInjector);
                var getMethod = module.injector.get.bind(module.injector);
                module.injector['get'] = function (token, notFoundValue) {
                    var getResult = getMethod(token, notFoundValue);
                    if (token === ROUTES) {
                        // translate lazy routes
                        return _this.localize.initChildRoutes([].concat.apply([], getResult));
                    }
                    else {
                        return getResult;
                    }
                };
                return module;
            }
        };
    };
    LazyUniversalModuleLoader.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    LazyUniversalModuleLoader.ctorParameters = function () { return [
        { type: LocalizeParser, decorators: [{ type: Inject, args: [forwardRef(function () { return LocalizeParser; }),] },] },
        { type: Compiler, },
        { type: undefined, decorators: [{ type: Inject, args: [MODULE_MAP,] },] },
    ]; };
    return LazyUniversalModuleLoader;
}());
export { LazyUniversalModuleLoader };
